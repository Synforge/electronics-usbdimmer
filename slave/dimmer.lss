
dimmer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000028a  0000031e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800108  00800108  00000326  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  00000a59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002f8  00000000  00000000  00000a81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001d5  00000000  00000000  00000d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000d1  00000000  00000000  00000f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000110  00000000  00000000  00001020  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000012e  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001e7  00000000  00000000  0000125e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00001445  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 21 01 	call	0x242	; 0x242 <main>
  9e:	0c 94 43 01 	jmp	0x286	; 0x286 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initIO>:


void initIO (void)
{
	//Set the debug LED as output
	DEBUG_DDR = (1<<DEBUG_LED);
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	87 b9       	out	0x07, r24	; 7

	//INT0 - ZCD
	EICRA |= (1<<ISC01) | (0<<ISC00);
  aa:	e9 e6       	ldi	r30, 0x69	; 105
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);
  b4:	e8 9a       	sbi	0x1d, 0	; 29
	// TCCR0B = 	((1 << CS02) | (1 << CS00));		// CTC Mode - Prescaler 1024
	// OCR0A = 	156;								// ~10ms
	// TIMSK0 = 	(1 << OCIE0A);

	//Set up SPI
	DDRB &= ~((1<<2)|(1<<3)|(1<<5));   // SCK, MOSI and SS as inputs
  b6:	84 b1       	in	r24, 0x04	; 4
  b8:	83 7d       	andi	r24, 0xD3	; 211
  ba:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1<<4);                    // MISO as output
  bc:	24 9a       	sbi	0x04, 4	; 4

    SPCR &= ~(1<<MSTR);                // Set as slave 
  be:	8c b5       	in	r24, 0x2c	; 44
  c0:	8f 7e       	andi	r24, 0xEF	; 239
  c2:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1<<SPR0)|(1<<SPR1);       // divide clock by 128
  c4:	8c b5       	in	r24, 0x2c	; 44
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1<<SPE);                  // Enable SPI
  ca:	8c b5       	in	r24, 0x2c	; 44
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	8c bd       	out	0x2c, r24	; 44

	sei();
  d0:	78 94       	sei
  d2:	08 95       	ret

000000d4 <initDimmers>:
}

void initDimmers(void) {
	//Set up the Data Direction Register
	DDRD |= (1<<PD0) | (1<<PD1) | (1<<PD3) | (1<<PD4) | (1<<PD5) | (1<<PD6) | (1<<PD7);
  d4:	8a b1       	in	r24, 0x0a	; 10
  d6:	8b 6f       	ori	r24, 0xFB	; 251
  d8:	8a b9       	out	0x0a, r24	; 10
	//Set the triacs off.
	PORTD &= ~((1<<PD0) | (1<<PD1) | (1<<PD3) | (1<<PD4) | (1<<PD5) | (1<<PD6) | (1<<PD7));
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	84 70       	andi	r24, 0x04	; 4
  de:	8b b9       	out	0x0b, r24	; 11
	//Set PB0 as an output (channel 8)
	DDRB |= (1<<PB0);
  e0:	20 9a       	sbi	0x04, 0	; 4
  e2:	08 95       	ret

000000e4 <spi_read>:
}

unsigned char *spi_read(uint8_t bytes, unsigned char c[]) 
{
  e4:	97 2f       	mov	r25, r23
	for(uint8_t i = 0; i < bytes; i++) {
  e6:	e6 2f       	mov	r30, r22
  e8:	f7 2f       	mov	r31, r23
  ea:	05 c0       	rjmp	.+10     	; 0xf6 <spi_read+0x12>
		while(!(SPSR & (1<<SPIF)));
  ec:	0d b4       	in	r0, 0x2d	; 45
  ee:	07 fe       	sbrs	r0, 7
  f0:	fd cf       	rjmp	.-6      	; 0xec <spi_read+0x8>
		c[i] = SPDR;
  f2:	2e b5       	in	r18, 0x2e	; 46
  f4:	21 93       	st	Z+, r18
	DDRB |= (1<<PB0);
}

unsigned char *spi_read(uint8_t bytes, unsigned char c[]) 
{
	for(uint8_t i = 0; i < bytes; i++) {
  f6:	2e 2f       	mov	r18, r30
  f8:	26 1b       	sub	r18, r22
  fa:	28 17       	cp	r18, r24
  fc:	b8 f3       	brcs	.-18     	; 0xec <spi_read+0x8>
		while(!(SPSR & (1<<SPIF)));
		c[i] = SPDR;
	}

	return c;
} 
  fe:	86 2f       	mov	r24, r22
 100:	08 95       	ret

00000102 <rampToLevel>:
		level = 255;
	
	if(level < 0 ) 
		level = 0;
	
	dimmerRequests[index] = level;
 102:	e8 2f       	mov	r30, r24
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	e0 5f       	subi	r30, 0xF0	; 240
 108:	fe 4f       	sbci	r31, 0xFE	; 254
 10a:	60 83       	st	Z, r22

	DEBUG_PORT = (1<<DEBUG_LED);
 10c:	80 e2       	ldi	r24, 0x20	; 32
 10e:	88 b9       	out	0x08, r24	; 8
 110:	08 95       	ret

00000112 <switchToLevel>:
		level = 255;
	
	if(level < 0 ) 
		level = 0;

	dimmerLevels[index] = level;
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fc 01       	movw	r30, r24
 116:	e8 5f       	subi	r30, 0xF8	; 248
 118:	fe 4f       	sbci	r31, 0xFE	; 254
 11a:	60 83       	st	Z, r22
	dimmerRequests[index] = level;
 11c:	fc 01       	movw	r30, r24
 11e:	e0 5f       	subi	r30, 0xF0	; 240
 120:	fe 4f       	sbci	r31, 0xFE	; 254
 122:	60 83       	st	Z, r22
 124:	08 95       	ret

00000126 <debugLed>:
}

void debugLed(uint8_t state) {
	DEBUG_PORT = (state<<DEBUG_LED);
 126:	82 95       	swap	r24
 128:	88 0f       	add	r24, r24
 12a:	80 7e       	andi	r24, 0xE0	; 224
 12c:	88 b9       	out	0x08, r24	; 8
 12e:	08 95       	ret

00000130 <__vector_1>:
}

volatile uint16_t count;
//Zero Cross Detection.
ISR(INT0_vect) {
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	count = 256;
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	90 93 19 01 	sts	0x0119, r25
 14a:	80 93 18 01 	sts	0x0118, r24

	TCCR1B |= 	((1 << CS10) | (1 << WGM12));
 14e:	e1 e8       	ldi	r30, 0x81	; 129
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	89 60       	ori	r24, 0x09	; 9
 156:	80 83       	st	Z, r24
	OCR1A = 	400;
 158:	80 e9       	ldi	r24, 0x90	; 144
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	90 93 89 00 	sts	0x0089, r25
 160:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= 	(1 << OCIE1A);	
 164:	ef e6       	ldi	r30, 0x6F	; 111
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	82 60       	ori	r24, 0x02	; 2
 16c:	80 83       	st	Z, r24
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <__vector_11>:

//Zero Cross Timer Interrupt.
ISR(TIMER1_COMPA_vect) {
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	2f 93       	push	r18
 18c:	3f 93       	push	r19
 18e:	4f 93       	push	r20
 190:	5f 93       	push	r21
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
	count--;
 19e:	80 91 18 01 	lds	r24, 0x0118
 1a2:	90 91 19 01 	lds	r25, 0x0119
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	90 93 19 01 	sts	0x0119, r25
 1ac:	80 93 18 01 	sts	0x0118, r24
 1b0:	e0 e0       	ldi	r30, 0x00	; 0
 1b2:	f1 e0       	ldi	r31, 0x01	; 1
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0

	for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
		if(dimmerLevels[i] >= count && dimmerLevels[i] != 0) {
 1b8:	dc 01       	movw	r26, r24
 1ba:	a8 5f       	subi	r26, 0xF8	; 248
 1bc:	be 4f       	sbci	r27, 0xFE	; 254
 1be:	4c 91       	ld	r20, X
 1c0:	20 91 18 01 	lds	r18, 0x0118
 1c4:	30 91 19 01 	lds	r19, 0x0119
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	68 f0       	brcs	.+26     	; 0x1ea <__vector_11+0x6a>
 1d0:	2c 91       	ld	r18, X
 1d2:	22 23       	and	r18, r18
 1d4:	51 f0       	breq	.+20     	; 0x1ea <__vector_11+0x6a>
			if(i > 6) {
 1d6:	87 30       	cpi	r24, 0x07	; 7
 1d8:	21 f4       	brne	.+8      	; 0x1e2 <__vector_11+0x62>
				PORTB |= dimmerMasks[i];
 1da:	25 b1       	in	r18, 0x05	; 5
 1dc:	30 81       	ld	r19, Z
 1de:	23 2b       	or	r18, r19
 1e0:	15 c0       	rjmp	.+42     	; 0x20c <__vector_11+0x8c>
			} else {
				PORTD |= dimmerMasks[i];
 1e2:	2b b1       	in	r18, 0x0b	; 11
 1e4:	30 81       	ld	r19, Z
 1e6:	23 2b       	or	r18, r19
 1e8:	17 c0       	rjmp	.+46     	; 0x218 <__vector_11+0x98>
			}
		} else if(dimmerLevels[i] >= (count + 1)) {
 1ea:	4c 91       	ld	r20, X
 1ec:	20 91 18 01 	lds	r18, 0x0118
 1f0:	30 91 19 01 	lds	r19, 0x0119
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	2f 5f       	subi	r18, 0xFF	; 255
 1f8:	3f 4f       	sbci	r19, 0xFF	; 255
 1fa:	42 17       	cp	r20, r18
 1fc:	53 07       	cpc	r21, r19
 1fe:	68 f0       	brcs	.+26     	; 0x21a <__vector_11+0x9a>
			if(i > 6) {
 200:	87 30       	cpi	r24, 0x07	; 7
 202:	31 f4       	brne	.+12     	; 0x210 <__vector_11+0x90>
				PORTB &= ~dimmerMasks[i];
 204:	35 b1       	in	r19, 0x05	; 5
 206:	20 81       	ld	r18, Z
 208:	20 95       	com	r18
 20a:	23 23       	and	r18, r19
 20c:	25 b9       	out	0x05, r18	; 5
 20e:	05 c0       	rjmp	.+10     	; 0x21a <__vector_11+0x9a>
			} else {
				PORTD &= ~dimmerMasks[i];
 210:	3b b1       	in	r19, 0x0b	; 11
 212:	20 81       	ld	r18, Z
 214:	20 95       	com	r18
 216:	23 23       	and	r18, r19
 218:	2b b9       	out	0x0b, r18	; 11
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	31 96       	adiw	r30, 0x01	; 1

//Zero Cross Timer Interrupt.
ISR(TIMER1_COMPA_vect) {
	count--;

	for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
 21e:	88 30       	cpi	r24, 0x08	; 8
 220:	91 05       	cpc	r25, r1
 222:	51 f6       	brne	.-108    	; 0x1b8 <__vector_11+0x38>
			} else {
				PORTD &= ~dimmerMasks[i];
			} 
		}
	}
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	5f 91       	pop	r21
 232:	4f 91       	pop	r20
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <main>:

	return c;
} 

int main (void)
{
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	00 d0       	rcall	.+0      	; 0x248 <main+0x6>
 248:	1f 92       	push	r1
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
	initIO(); //Setup IO pins and defaults
 24e:	0e 94 53 00 	call	0xa6	; 0xa6 <initIO>
	initDimmers(); //Set up the dimmers.
 252:	0e 94 6a 00 	call	0xd4	; 0xd4 <initDimmers>

	while(1) {

		while(!(SPSR & (1<<SPIF)));
 256:	0d b4       	in	r0, 0x2d	; 45
 258:	07 fe       	sbrs	r0, 7
 25a:	fd cf       	rjmp	.-6      	; 0x256 <main+0x14>

        if(SPDR == CMD_SET) {
 25c:	8e b5       	in	r24, 0x2e	; 46
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	d1 f7       	brne	.-12     	; 0x256 <main+0x14>
        	//Read the next 3 bytes
        	unsigned char c[3];
        	spi_read(3, c);
 262:	be 01       	movw	r22, r28
 264:	6f 5f       	subi	r22, 0xFF	; 255
 266:	7f 4f       	sbci	r23, 0xFF	; 255
 268:	83 e0       	ldi	r24, 0x03	; 3
 26a:	0e 94 72 00 	call	0xe4	; 0xe4 <spi_read>

        	// if(c[0] == METHOD_SWITCH) {
        		switchToLevel((uint8_t)c[1], (uint8_t)c[2]);
 26e:	2b 81       	ldd	r18, Y+3	; 0x03
		level = 255;
	
	if(level < 0 ) 
		level = 0;

	dimmerLevels[index] = level;
 270:	8a 81       	ldd	r24, Y+2	; 0x02
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	fc 01       	movw	r30, r24
 276:	e8 5f       	subi	r30, 0xF8	; 248
 278:	fe 4f       	sbci	r31, 0xFE	; 254
 27a:	20 83       	st	Z, r18
	dimmerRequests[index] = level;
 27c:	fc 01       	movw	r30, r24
 27e:	e0 5f       	subi	r30, 0xF0	; 240
 280:	fe 4f       	sbci	r31, 0xFE	; 254
 282:	20 83       	st	Z, r18
 284:	e8 cf       	rjmp	.-48     	; 0x256 <main+0x14>

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
