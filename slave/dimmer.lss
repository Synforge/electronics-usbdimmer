
dimmer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002a8  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  0000033e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  00000a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000402  00000000  00000000  00000a99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000243  00000000  00000000  00000e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000012b  00000000  00000000  000010de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000138  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000018e  00000000  00000000  00001344  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002ae  00000000  00000000  000014d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	86 c0       	rjmp	.+268    	; 0x110 <__vector_1>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	a4 c0       	rjmp	.+328    	; 0x160 <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	ea c0       	rjmp	.+468    	; 0x1f2 <__vector_14>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	53 c0       	rjmp	.+166    	; 0xca <__vector_17>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e8 ea       	ldi	r30, 0xA8	; 168
  48:	f2 e0       	ldi	r31, 0x02	; 2
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a8 30       	cpi	r26, 0x08	; 8
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	fd d0       	rcall	.+506    	; 0x262 <main>
  68:	1d c1       	rjmp	.+570    	; 0x2a4 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <initIO>:


void initIO (void)
{
	//Set the debug LED as output
	DEBUG_DDR = (1<<DEBUG_LED);
  6c:	80 e2       	ldi	r24, 0x20	; 32
  6e:	87 b9       	out	0x07, r24	; 7

	//INT0 - ZCD
	EICRA = (1<<ISC01) | (0<<ISC00);
  70:	82 e0       	ldi	r24, 0x02	; 2
  72:	80 93 69 00 	sts	0x0069, r24
	EIMSK |= (1<<INT0);
  76:	e8 9a       	sbi	0x1d, 0	; 29

	//Dimming Timer
	TCCR0A = 	(1 << WGM01);
  78:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 	((1 << CS02) | (1 << CS00));		// CTC Mode - Prescaler 1024
  7a:	95 e0       	ldi	r25, 0x05	; 5
  7c:	95 bd       	out	0x25, r25	; 37
	OCR0A = 	156;								// ~10ms
  7e:	9c e9       	ldi	r25, 0x9C	; 156
  80:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 	(1 << OCIE0A);
  82:	80 93 6e 00 	sts	0x006E, r24

	//Set up SPI
	DDRB &= ~((1<<2)|(1<<3)|(1<<5));   // SCK, MOSI and SS as inputs
  86:	84 b1       	in	r24, 0x04	; 4
  88:	83 7d       	andi	r24, 0xD3	; 211
  8a:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1<<4);                    // MISO as output
  8c:	24 9a       	sbi	0x04, 4	; 4

    SPCR &= ~(1<<MSTR);                // Set as slave 
  8e:	8c b5       	in	r24, 0x2c	; 44
  90:	8f 7e       	andi	r24, 0xEF	; 239
  92:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1<<SPR0)|(1<<SPR1);       // divide clock by 128
  94:	8c b5       	in	r24, 0x2c	; 44
  96:	83 60       	ori	r24, 0x03	; 3
  98:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1<<SPE);                  // Enable SPI
  9a:	8c b5       	in	r24, 0x2c	; 44
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	8c bd       	out	0x2c, r24	; 44

	sei();
  a0:	78 94       	sei
  a2:	08 95       	ret

000000a4 <initDimmers>:
}

void initDimmers(void) {
	//Set up the Data Direction Register
	DDRD = (1<<PD0) | (1<<PD1);
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	8a b9       	out	0x0a, r24	; 10
	//Set the triacs off.
	PORTD = 0x00;
  a8:	1b b8       	out	0x0b, r1	; 11
  aa:	08 95       	ret

000000ac <spi_read>:
}

unsigned char *spi_read(uint8_t bytes, unsigned char c[]) 
{
  ac:	97 2f       	mov	r25, r23
	for(uint8_t i = 0; i < bytes; i++) {
  ae:	e6 2f       	mov	r30, r22
  b0:	f7 2f       	mov	r31, r23
  b2:	05 c0       	rjmp	.+10     	; 0xbe <spi_read+0x12>
		while(!(SPSR & (1<<SPIF)));
  b4:	0d b4       	in	r0, 0x2d	; 45
  b6:	07 fe       	sbrs	r0, 7
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <spi_read+0x8>
		c[i] = SPDR;
  ba:	2e b5       	in	r18, 0x2e	; 46
  bc:	21 93       	st	Z+, r18
	PORTD = 0x00;
}

unsigned char *spi_read(uint8_t bytes, unsigned char c[]) 
{
	for(uint8_t i = 0; i < bytes; i++) {
  be:	2e 2f       	mov	r18, r30
  c0:	26 1b       	sub	r18, r22
  c2:	28 17       	cp	r18, r24
  c4:	b8 f3       	brcs	.-18     	; 0xb4 <spi_read+0x8>
		while(!(SPSR & (1<<SPIF)));
		c[i] = SPDR;
	}

	return c;
} 
  c6:	86 2f       	mov	r24, r22
  c8:	08 95       	ret

000000ca <__vector_17>:

	return(0);
}

ISR(SPI_STC_vect)
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
	DEBUG_PORT = (1 << DEBUG_LED);
  d6:	80 e2       	ldi	r24, 0x20	; 32
  d8:	88 b9       	out	0x08, r24	; 8
}
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <rampToLevel>:
		level = 255;
	
	if(level < 0 ) 
		level = 0;
	
	dimmerRequests[index] = level;
  e6:	e8 2f       	mov	r30, r24
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	ec 5f       	subi	r30, 0xFC	; 252
  ec:	fe 4f       	sbci	r31, 0xFE	; 254
  ee:	60 83       	st	Z, r22
  f0:	08 95       	ret

000000f2 <switchToLevel>:
		level = 255;
	
	if(level < 0 ) 
		level = 0;

	dimmerLevels[index] = level;
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	fc 01       	movw	r30, r24
  f6:	ee 5f       	subi	r30, 0xFE	; 254
  f8:	fe 4f       	sbci	r31, 0xFE	; 254
  fa:	60 83       	st	Z, r22
	dimmerRequests[index] = level;
  fc:	fc 01       	movw	r30, r24
  fe:	ec 5f       	subi	r30, 0xFC	; 252
 100:	fe 4f       	sbci	r31, 0xFE	; 254
 102:	60 83       	st	Z, r22
 104:	08 95       	ret

00000106 <debugLed>:
}

void debugLed(uint8_t state) {
	DEBUG_PORT = (state<<DEBUG_LED);
 106:	82 95       	swap	r24
 108:	88 0f       	add	r24, r24
 10a:	80 7e       	andi	r24, 0xE0	; 224
 10c:	88 b9       	out	0x08, r24	; 8
 10e:	08 95       	ret

00000110 <__vector_1>:
}

volatile uint16_t count;
//Zero Cross Detection.
ISR(INT0_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	ef 93       	push	r30
 120:	ff 93       	push	r31
	count = 256;
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	90 93 07 01 	sts	0x0107, r25
 12a:	80 93 06 01 	sts	0x0106, r24

	TCCR1B |= 	((1 << CS10) | (1 << WGM12));
 12e:	e1 e8       	ldi	r30, 0x81	; 129
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	89 60       	ori	r24, 0x09	; 9
 136:	80 83       	st	Z, r24
	OCR1A = 	400;
 138:	80 e9       	ldi	r24, 0x90	; 144
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	90 93 89 00 	sts	0x0089, r25
 140:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= 	(1 << OCIE1A);	
 144:	ef e6       	ldi	r30, 0x6F	; 111
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	80 83       	st	Z, r24
}
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <__vector_11>:

//Zero Cross Timer Interrupt.
ISR(TIMER1_COMPA_vect) {
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	2f 93       	push	r18
 16c:	3f 93       	push	r19
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
	count--;
 172:	80 91 06 01 	lds	r24, 0x0106
 176:	90 91 07 01 	lds	r25, 0x0107
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	90 93 07 01 	sts	0x0107, r25
 180:	80 93 06 01 	sts	0x0106, r24

	for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
		if(dimmerLevels[i] >= count) {
 184:	20 91 02 01 	lds	r18, 0x0102
 188:	80 91 06 01 	lds	r24, 0x0106
 18c:	90 91 07 01 	lds	r25, 0x0107
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	28 17       	cp	r18, r24
 194:	39 07       	cpc	r19, r25
 196:	68 f0       	brcs	.+26     	; 0x1b2 <__vector_11+0x52>
			DIMMER_PORT |= dimmerMasks[i];
 198:	8b b1       	in	r24, 0x0b	; 11
 19a:	90 91 00 01 	lds	r25, 0x0100
 19e:	89 2b       	or	r24, r25
 1a0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	88 e2       	ldi	r24, 0x28	; 40
 1a4:	8a 95       	dec	r24
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <__vector_11+0x44>
			_delay_us(10);
	 		DIMMER_PORT ^= dimmerMasks[i];
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	90 91 00 01 	lds	r25, 0x0100
 1ae:	89 27       	eor	r24, r25
 1b0:	8b b9       	out	0x0b, r24	; 11
//Zero Cross Timer Interrupt.
ISR(TIMER1_COMPA_vect) {
	count--;

	for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
		if(dimmerLevels[i] >= count) {
 1b2:	20 91 03 01 	lds	r18, 0x0103
 1b6:	80 91 06 01 	lds	r24, 0x0106
 1ba:	90 91 07 01 	lds	r25, 0x0107
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	28 17       	cp	r18, r24
 1c2:	39 07       	cpc	r19, r25
 1c4:	68 f0       	brcs	.+26     	; 0x1e0 <__vector_11+0x80>
			DIMMER_PORT |= dimmerMasks[i];
 1c6:	8b b1       	in	r24, 0x0b	; 11
 1c8:	90 91 01 01 	lds	r25, 0x0101
 1cc:	89 2b       	or	r24, r25
 1ce:	8b b9       	out	0x0b, r24	; 11
 1d0:	88 e2       	ldi	r24, 0x28	; 40
 1d2:	8a 95       	dec	r24
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <__vector_11+0x72>
			_delay_us(10);
	 		DIMMER_PORT ^= dimmerMasks[i];
 1d6:	8b b1       	in	r24, 0x0b	; 11
 1d8:	90 91 01 01 	lds	r25, 0x0101
 1dc:	89 27       	eor	r24, r25
 1de:	8b b9       	out	0x0b, r24	; 11
		}
	}

}
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <__vector_14>:

//Dimming Interrupt
ISR(TIMER0_COMPA_vect) {
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	8f 93       	push	r24
 1fe:	9f 93       	push	r25

	for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
		if(dimmerRequests[i] > dimmerLevels[i]) {
 200:	90 91 04 01 	lds	r25, 0x0104
 204:	80 91 02 01 	lds	r24, 0x0102
 208:	89 17       	cp	r24, r25
 20a:	50 f0       	brcs	.+20     	; 0x220 <__vector_14+0x2e>
			dimmerLevels[i]++;
		} else if(dimmerRequests[i] < dimmerLevels[i]) {
 20c:	90 91 04 01 	lds	r25, 0x0104
 210:	80 91 02 01 	lds	r24, 0x0102
 214:	98 17       	cp	r25, r24
 216:	48 f4       	brcc	.+18     	; 0x22a <__vector_14+0x38>
			dimmerLevels[i]--;
 218:	80 91 02 01 	lds	r24, 0x0102
 21c:	81 50       	subi	r24, 0x01	; 1
 21e:	03 c0       	rjmp	.+6      	; 0x226 <__vector_14+0x34>
//Dimming Interrupt
ISR(TIMER0_COMPA_vect) {

	for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
		if(dimmerRequests[i] > dimmerLevels[i]) {
			dimmerLevels[i]++;
 220:	80 91 02 01 	lds	r24, 0x0102
 224:	8f 5f       	subi	r24, 0xFF	; 255
 226:	80 93 02 01 	sts	0x0102, r24

//Dimming Interrupt
ISR(TIMER0_COMPA_vect) {

	for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
		if(dimmerRequests[i] > dimmerLevels[i]) {
 22a:	90 91 05 01 	lds	r25, 0x0105
 22e:	80 91 03 01 	lds	r24, 0x0103
 232:	89 17       	cp	r24, r25
 234:	20 f4       	brcc	.+8      	; 0x23e <__vector_14+0x4c>
			dimmerLevels[i]++;
 236:	80 91 03 01 	lds	r24, 0x0103
 23a:	8f 5f       	subi	r24, 0xFF	; 255
 23c:	09 c0       	rjmp	.+18     	; 0x250 <__vector_14+0x5e>
		} else if(dimmerRequests[i] < dimmerLevels[i]) {
 23e:	90 91 05 01 	lds	r25, 0x0105
 242:	80 91 03 01 	lds	r24, 0x0103
 246:	98 17       	cp	r25, r24
 248:	28 f4       	brcc	.+10     	; 0x254 <__vector_14+0x62>
			dimmerLevels[i]--;
 24a:	80 91 03 01 	lds	r24, 0x0103
 24e:	81 50       	subi	r24, 0x01	; 1
 250:	80 93 03 01 	sts	0x0103, r24
		}
	}

 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <main>:

	return c;
} 

int main (void)
{
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	00 d0       	rcall	.+0      	; 0x268 <main+0x6>
 268:	1f 92       	push	r1
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
	initIO(); //Setup IO pins and defaults
 26e:	fe de       	rcall	.-516    	; 0x6c <initIO>
	initDimmers(); //Set up the dimmers.
 270:	19 df       	rcall	.-462    	; 0xa4 <initDimmers>

	while(1) {

		while(!(SPSR & (1<<SPIF)));
 272:	0d b4       	in	r0, 0x2d	; 45
 274:	07 fe       	sbrs	r0, 7
 276:	fd cf       	rjmp	.-6      	; 0x272 <main+0x10>

        if(SPDR == CMD_SET) {
 278:	8e b5       	in	r24, 0x2e	; 46
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	d1 f7       	brne	.-12     	; 0x272 <main+0x10>
        	//Read the next 3 bytes
        	unsigned char c[3];
        	spi_read(3, c);
 27e:	be 01       	movw	r22, r28
 280:	6f 5f       	subi	r22, 0xFF	; 255
 282:	7f 4f       	sbci	r23, 0xFF	; 255
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	12 df       	rcall	.-476    	; 0xac <spi_read>

        	if(c[0] == METHOD_SWITCH) {
 288:	99 81       	ldd	r25, Y+1	; 0x01
 28a:	8b 81       	ldd	r24, Y+3	; 0x03
 28c:	ea 81       	ldd	r30, Y+2	; 0x02
		level = 255;
	
	if(level < 0 ) 
		level = 0;

	dimmerLevels[index] = level;
 28e:	f0 e0       	ldi	r31, 0x00	; 0
        if(SPDR == CMD_SET) {
        	//Read the next 3 bytes
        	unsigned char c[3];
        	spi_read(3, c);

        	if(c[0] == METHOD_SWITCH) {
 290:	91 11       	cpse	r25, r1
 292:	04 c0       	rjmp	.+8      	; 0x29c <main+0x3a>
		level = 255;
	
	if(level < 0 ) 
		level = 0;

	dimmerLevels[index] = level;
 294:	df 01       	movw	r26, r30
 296:	ae 5f       	subi	r26, 0xFE	; 254
 298:	be 4f       	sbci	r27, 0xFE	; 254
 29a:	8c 93       	st	X, r24
		level = 255;
	
	if(level < 0 ) 
		level = 0;
	
	dimmerRequests[index] = level;
 29c:	ec 5f       	subi	r30, 0xFC	; 252
 29e:	fe 4f       	sbci	r31, 0xFE	; 254
 2a0:	80 83       	st	Z, r24
 2a2:	e7 cf       	rjmp	.-50     	; 0x272 <main+0x10>

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
