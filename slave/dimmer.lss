
dimmer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000356  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000356  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800108  00800108  000003f2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  00000b25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000003fb  00000000  00000000  00000b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001ff  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000fc  00000000  00000000  00001147  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000134  00000000  00000000  00001244  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000013c  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000027d  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  00001731  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
  9e:	0c 94 a9 01 	jmp	0x352	; 0x352 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initIO>:


void initIO (void)
{
	//Set the debug LED as output
	DEBUG_DDR = (1<<DEBUG_LED);
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	87 b9       	out	0x07, r24	; 7

	//INT0 - ZCD
	EICRA |= (1<<ISC01) | (0<<ISC00);
  aa:	e9 e6       	ldi	r30, 0x69	; 105
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);
  b4:	e8 9a       	sbi	0x1d, 0	; 29

	//Dimming Timer
	TCCR0A = 	(1 << WGM01);
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 	((1 << CS02) | (1 << CS00));		// CTC Mode - Prescaler 1024
  ba:	95 e0       	ldi	r25, 0x05	; 5
  bc:	95 bd       	out	0x25, r25	; 37
	OCR0A = 	156;								// ~10ms
  be:	9c e9       	ldi	r25, 0x9C	; 156
  c0:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 	(1 << OCIE0A);
  c2:	80 93 6e 00 	sts	0x006E, r24

	//Set up SPI
	DDRB &= ~((1<<2)|(1<<3)|(1<<5));   // SCK, MOSI and SS as inputs
  c6:	84 b1       	in	r24, 0x04	; 4
  c8:	83 7d       	andi	r24, 0xD3	; 211
  ca:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1<<4);                    // MISO as output
  cc:	24 9a       	sbi	0x04, 4	; 4

    SPCR &= ~(1<<MSTR);                // Set as slave 
  ce:	8c b5       	in	r24, 0x2c	; 44
  d0:	8f 7e       	andi	r24, 0xEF	; 239
  d2:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1<<SPR0)|(1<<SPR1);       // divide clock by 128
  d4:	8c b5       	in	r24, 0x2c	; 44
  d6:	83 60       	ori	r24, 0x03	; 3
  d8:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1<<SPE);                  // Enable SPI
  da:	8c b5       	in	r24, 0x2c	; 44
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	8c bd       	out	0x2c, r24	; 44

	sei();
  e0:	78 94       	sei
  e2:	08 95       	ret

000000e4 <initDimmers>:
}

void initDimmers(void) {
	//Set up the Data Direction Register
	DDRD |= (1<<PD0) | (1<<PD1) | (1<<PD3) | (1<<PD4) | (1<<PD5) | (1<<PD6) | (1<<PD7);
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	8b 6f       	ori	r24, 0xFB	; 251
  e8:	8a b9       	out	0x0a, r24	; 10
	//Set the triacs off.
	PORTD &= ~((1<<PD0) | (1<<PD1) | (1<<PD3) | (1<<PD4) | (1<<PD5) | (1<<PD6) | (1<<PD7));
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	84 70       	andi	r24, 0x04	; 4
  ee:	8b b9       	out	0x0b, r24	; 11
	//Set PB0 as an output (channel 8)
	DDRB |= (1<<PB0);
  f0:	20 9a       	sbi	0x04, 0	; 4
  f2:	08 95       	ret

000000f4 <spi_read>:
}

unsigned char *spi_read(uint8_t bytes, unsigned char c[]) 
{
  f4:	97 2f       	mov	r25, r23
	for(uint8_t i = 0; i < bytes; i++) {
  f6:	e6 2f       	mov	r30, r22
  f8:	f7 2f       	mov	r31, r23
  fa:	05 c0       	rjmp	.+10     	; 0x106 <spi_read+0x12>
		while(!(SPSR & (1<<SPIF)));
  fc:	0d b4       	in	r0, 0x2d	; 45
  fe:	07 fe       	sbrs	r0, 7
 100:	fd cf       	rjmp	.-6      	; 0xfc <spi_read+0x8>
		c[i] = SPDR;
 102:	2e b5       	in	r18, 0x2e	; 46
 104:	21 93       	st	Z+, r18
	DDRB |= (1<<PB0);
}

unsigned char *spi_read(uint8_t bytes, unsigned char c[]) 
{
	for(uint8_t i = 0; i < bytes; i++) {
 106:	2e 2f       	mov	r18, r30
 108:	26 1b       	sub	r18, r22
 10a:	28 17       	cp	r18, r24
 10c:	b8 f3       	brcs	.-18     	; 0xfc <spi_read+0x8>
		while(!(SPSR & (1<<SPIF)));
		c[i] = SPDR;
	}

	return c;
} 
 10e:	86 2f       	mov	r24, r22
 110:	08 95       	ret

00000112 <rampToLevel>:
		level = 255;
	
	if(level < 0 ) 
		level = 0;
	
	dimmerRequests[index] = level;
 112:	e8 2f       	mov	r30, r24
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	e0 5f       	subi	r30, 0xF0	; 240
 118:	fe 4f       	sbci	r31, 0xFE	; 254
 11a:	60 83       	st	Z, r22
 11c:	08 95       	ret

0000011e <switchToLevel>:
		level = 255;
	
	if(level < 0 ) 
		level = 0;

	dimmerLevels[index] = level;
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	fc 01       	movw	r30, r24
 122:	e8 5f       	subi	r30, 0xF8	; 248
 124:	fe 4f       	sbci	r31, 0xFE	; 254
 126:	60 83       	st	Z, r22
	dimmerRequests[index] = level;
 128:	fc 01       	movw	r30, r24
 12a:	e0 5f       	subi	r30, 0xF0	; 240
 12c:	fe 4f       	sbci	r31, 0xFE	; 254
 12e:	60 83       	st	Z, r22
 130:	08 95       	ret

00000132 <debugLed>:
}

void debugLed(uint8_t state) {
	DEBUG_PORT = (state<<DEBUG_LED);
 132:	82 95       	swap	r24
 134:	88 0f       	add	r24, r24
 136:	80 7e       	andi	r24, 0xE0	; 224
 138:	88 b9       	out	0x08, r24	; 8
 13a:	08 95       	ret

0000013c <__vector_1>:
}

volatile uint16_t count;
//Zero Cross Detection.
ISR(INT0_vect) {
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	ef 93       	push	r30
 14c:	ff 93       	push	r31
	count = 256;
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	90 93 19 01 	sts	0x0119, r25
 156:	80 93 18 01 	sts	0x0118, r24

	TCCR1B |= 	((1 << CS10) | (1 << WGM12));
 15a:	e1 e8       	ldi	r30, 0x81	; 129
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	89 60       	ori	r24, 0x09	; 9
 162:	80 83       	st	Z, r24
	OCR1A = 	400;
 164:	80 e9       	ldi	r24, 0x90	; 144
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	90 93 89 00 	sts	0x0089, r25
 16c:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= 	(1 << OCIE1A);	
 170:	ef e6       	ldi	r30, 0x6F	; 111
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	82 60       	ori	r24, 0x02	; 2
 178:	80 83       	st	Z, r24
}
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <__vector_11>:

//Zero Cross Timer Interrupt.
ISR(TIMER1_COMPA_vect) {
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	2f 93       	push	r18
 198:	3f 93       	push	r19
 19a:	4f 93       	push	r20
 19c:	5f 93       	push	r21
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
	count--;
 1aa:	80 91 18 01 	lds	r24, 0x0118
 1ae:	90 91 19 01 	lds	r25, 0x0119
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	90 93 19 01 	sts	0x0119, r25
 1b8:	80 93 18 01 	sts	0x0118, r24
 1bc:	e0 e0       	ldi	r30, 0x00	; 0
 1be:	f1 e0       	ldi	r31, 0x01	; 1
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0

	for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
		if(dimmerLevels[i] >= count && dimmerLevels[i] != 0) {
 1c4:	dc 01       	movw	r26, r24
 1c6:	a8 5f       	subi	r26, 0xF8	; 248
 1c8:	be 4f       	sbci	r27, 0xFE	; 254
 1ca:	4c 91       	ld	r20, X
 1cc:	20 91 18 01 	lds	r18, 0x0118
 1d0:	30 91 19 01 	lds	r19, 0x0119
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	42 17       	cp	r20, r18
 1d8:	53 07       	cpc	r21, r19
 1da:	38 f0       	brcs	.+14     	; 0x1ea <__vector_11+0x5e>
 1dc:	2c 91       	ld	r18, X
 1de:	22 23       	and	r18, r18
 1e0:	21 f0       	breq	.+8      	; 0x1ea <__vector_11+0x5e>
			if(i > 6) {
				PORTB |= dimmerMasks[i];
			} else {
				PORTD |= dimmerMasks[i];
 1e2:	2b b1       	in	r18, 0x0b	; 11
 1e4:	30 81       	ld	r19, Z
 1e6:	23 2b       	or	r18, r19
 1e8:	0f c0       	rjmp	.+30     	; 0x208 <__vector_11+0x7c>
			}
		} else if(dimmerLevels[i] >= (count + 1)) {
 1ea:	4c 91       	ld	r20, X
 1ec:	20 91 18 01 	lds	r18, 0x0118
 1f0:	30 91 19 01 	lds	r19, 0x0119
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	2f 5f       	subi	r18, 0xFF	; 255
 1f8:	3f 4f       	sbci	r19, 0xFF	; 255
 1fa:	42 17       	cp	r20, r18
 1fc:	53 07       	cpc	r21, r19
 1fe:	28 f0       	brcs	.+10     	; 0x20a <__vector_11+0x7e>
			if(i > 6) {
				PORTB &= ~dimmerMasks[i];
			} else {
				PORTD &= ~dimmerMasks[i];
 200:	3b b1       	in	r19, 0x0b	; 11
 202:	20 81       	ld	r18, Z
 204:	20 95       	com	r18
 206:	23 23       	and	r18, r19
 208:	2b b9       	out	0x0b, r18	; 11
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	31 96       	adiw	r30, 0x01	; 1

//Zero Cross Timer Interrupt.
ISR(TIMER1_COMPA_vect) {
	count--;

	for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	91 05       	cpc	r25, r1
 212:	c1 f6       	brne	.-80     	; 0x1c4 <__vector_11+0x38>
			} else {
				PORTD &= ~dimmerMasks[i];
			}
		}
	}
}
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	bf 91       	pop	r27
 21a:	af 91       	pop	r26
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	5f 91       	pop	r21
 222:	4f 91       	pop	r20
 224:	3f 91       	pop	r19
 226:	2f 91       	pop	r18
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <__vector_14>:

//Dimming Interrupt
ISR(TIMER0_COMPA_vect) {
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25

        for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
                if(dimmerRequests[i] > dimmerLevels[i]) {
 240:	90 91 10 01 	lds	r25, 0x0110
 244:	80 91 08 01 	lds	r24, 0x0108
 248:	89 17       	cp	r24, r25
 24a:	50 f0       	brcs	.+20     	; 0x260 <__vector_14+0x2e>
                        dimmerLevels[i]++;
                } else if(dimmerRequests[i] < dimmerLevels[i]) {
 24c:	90 91 10 01 	lds	r25, 0x0110
 250:	80 91 08 01 	lds	r24, 0x0108
 254:	98 17       	cp	r25, r24
 256:	48 f4       	brcc	.+18     	; 0x26a <__vector_14+0x38>
                        dimmerLevels[i]--;
 258:	80 91 08 01 	lds	r24, 0x0108
 25c:	81 50       	subi	r24, 0x01	; 1
 25e:	03 c0       	rjmp	.+6      	; 0x266 <__vector_14+0x34>
//Dimming Interrupt
ISR(TIMER0_COMPA_vect) {

        for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
                if(dimmerRequests[i] > dimmerLevels[i]) {
                        dimmerLevels[i]++;
 260:	80 91 08 01 	lds	r24, 0x0108
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	80 93 08 01 	sts	0x0108, r24

//Dimming Interrupt
ISR(TIMER0_COMPA_vect) {

        for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
                if(dimmerRequests[i] > dimmerLevels[i]) {
 26a:	90 91 11 01 	lds	r25, 0x0111
 26e:	80 91 09 01 	lds	r24, 0x0109
 272:	89 17       	cp	r24, r25
 274:	20 f4       	brcc	.+8      	; 0x27e <__vector_14+0x4c>
                        dimmerLevels[i]++;
 276:	80 91 09 01 	lds	r24, 0x0109
 27a:	8f 5f       	subi	r24, 0xFF	; 255
 27c:	09 c0       	rjmp	.+18     	; 0x290 <__vector_14+0x5e>
                } else if(dimmerRequests[i] < dimmerLevels[i]) {
 27e:	90 91 11 01 	lds	r25, 0x0111
 282:	80 91 09 01 	lds	r24, 0x0109
 286:	98 17       	cp	r25, r24
 288:	28 f4       	brcc	.+10     	; 0x294 <__vector_14+0x62>
                        dimmerLevels[i]--;
 28a:	80 91 09 01 	lds	r24, 0x0109
 28e:	81 50       	subi	r24, 0x01	; 1
 290:	80 93 09 01 	sts	0x0109, r24
                }
        }

}
 294:	9f 91       	pop	r25
 296:	8f 91       	pop	r24
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <main>:

	return c;
} 

int main (void)
{
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <main+0x6>
 2a8:	1f 92       	push	r1
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
	initIO(); //Setup IO pins and defaults
 2ae:	0e 94 53 00 	call	0xa6	; 0xa6 <initIO>
	initDimmers(); //Set up the dimmers.
 2b2:	0e 94 72 00 	call	0xe4	; 0xe4 <initDimmers>
         		}

        	} else 
                if(command == CMD_INC || command == CMD_DEC) {
		    if(command == CMD_INC) {
			DEBUG_PORT ^= (1<<DEBUG_LED);
 2b6:	10 e2       	ldi	r17, 0x20	; 32
	initIO(); //Setup IO pins and defaults
	initDimmers(); //Set up the dimmers.

	while(1) {

		while(!(SPSR & (1<<SPIF)));
 2b8:	0d b4       	in	r0, 0x2d	; 45
 2ba:	07 fe       	sbrs	r0, 7
 2bc:	fd cf       	rjmp	.-6      	; 0x2b8 <main+0x16>

                uint8_t command = SPDR;
 2be:	0e b5       	in	r16, 0x2e	; 46

        	if(command == CMD_SET) {
 2c0:	01 30       	cpi	r16, 0x01	; 1
 2c2:	99 f4       	brne	.+38     	; 0x2ea <main+0x48>
        		//Read the next 3 bytes
        		unsigned char c[3];
        		spi_read(3, c);
 2c4:	be 01       	movw	r22, r28
 2c6:	6f 5f       	subi	r22, 0xFF	; 255
 2c8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ca:	83 e0       	ldi	r24, 0x03	; 3
 2cc:	0e 94 7a 00 	call	0xf4	; 0xf4 <spi_read>

        		if(c[0] == METHOD_SWITCH) {
 2d0:	99 81       	ldd	r25, Y+1	; 0x01
 2d2:	8b 81       	ldd	r24, Y+3	; 0x03
 2d4:	ea 81       	ldd	r30, Y+2	; 0x02
		level = 255;
	
	if(level < 0 ) 
		level = 0;

	dimmerLevels[index] = level;
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
        	if(command == CMD_SET) {
        		//Read the next 3 bytes
        		unsigned char c[3];
        		spi_read(3, c);

        		if(c[0] == METHOD_SWITCH) {
 2d8:	91 11       	cpse	r25, r1
 2da:	04 c0       	rjmp	.+8      	; 0x2e4 <main+0x42>
		level = 255;
	
	if(level < 0 ) 
		level = 0;

	dimmerLevels[index] = level;
 2dc:	df 01       	movw	r26, r30
 2de:	a8 5f       	subi	r26, 0xF8	; 248
 2e0:	be 4f       	sbci	r27, 0xFE	; 254
 2e2:	8c 93       	st	X, r24
		level = 255;
	
	if(level < 0 ) 
		level = 0;
	
	dimmerRequests[index] = level;
 2e4:	e0 5f       	subi	r30, 0xF0	; 240
 2e6:	fe 4f       	sbci	r31, 0xFE	; 254
 2e8:	32 c0       	rjmp	.+100    	; 0x34e <main+0xac>
         		} else {
				rampToLevel((uint8_t)c[1], (uint8_t)c[2]);
         		}

        	} else 
                if(command == CMD_INC || command == CMD_DEC) {
 2ea:	80 2f       	mov	r24, r16
 2ec:	82 50       	subi	r24, 0x02	; 2
 2ee:	82 30       	cpi	r24, 0x02	; 2
 2f0:	18 f7       	brcc	.-58     	; 0x2b8 <main+0x16>
		    if(command == CMD_INC) {
 2f2:	02 30       	cpi	r16, 0x02	; 2
 2f4:	19 f4       	brne	.+6      	; 0x2fc <main+0x5a>
			DEBUG_PORT ^= (1<<DEBUG_LED);
 2f6:	88 b1       	in	r24, 0x08	; 8
 2f8:	81 27       	eor	r24, r17
 2fa:	88 b9       	out	0x08, r24	; 8
		    }

                    //Read the next 3 bytes
		    unsigned char c[3];
                    spi_read(3, c);
 2fc:	be 01       	movw	r22, r28
 2fe:	6f 5f       	subi	r22, 0xFF	; 255
 300:	7f 4f       	sbci	r23, 0xFF	; 255
 302:	83 e0       	ldi	r24, 0x03	; 3
 304:	0e 94 7a 00 	call	0xf4	; 0xf4 <spi_read>

                    int16_t cur = dimmerLevels[c[1]];
 308:	2a 81       	ldd	r18, Y+2	; 0x02
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	f9 01       	movw	r30, r18
 30e:	e8 5f       	subi	r30, 0xF8	; 248
 310:	fe 4f       	sbci	r31, 0xFE	; 254
 312:	80 81       	ld	r24, Z
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	4b 81       	ldd	r20, Y+3	; 0x03

                    if(command == CMD_INC) {
 318:	02 30       	cpi	r16, 0x02	; 2
 31a:	49 f4       	brne	.+18     	; 0x32e <main+0x8c>
                        cur += c[2];
 31c:	84 0f       	add	r24, r20
 31e:	91 1d       	adc	r25, r1
 320:	8f 3f       	cpi	r24, 0xFF	; 255
 322:	91 05       	cpc	r25, r1
 324:	51 f0       	breq	.+20     	; 0x33a <main+0x98>
 326:	4c f0       	brlt	.+18     	; 0x33a <main+0x98>
 328:	8f ef       	ldi	r24, 0xFF	; 255
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	06 c0       	rjmp	.+12     	; 0x33a <main+0x98>
                    } else {
                        cur -= c[2];
 32e:	84 1b       	sub	r24, r20
 330:	91 09       	sbc	r25, r1
                    if(cur > 255) {
                        cur = 255;
                    }


                    if(cur < 0) {
 332:	97 ff       	sbrs	r25, 7
 334:	02 c0       	rjmp	.+4      	; 0x33a <main+0x98>
                        cur = 0;
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e0       	ldi	r25, 0x00	; 0
                    }


                    if(c[0] == METHOD_SWITCH) {
 33a:	49 81       	ldd	r20, Y+1	; 0x01
 33c:	f9 01       	movw	r30, r18
 33e:	e0 5f       	subi	r30, 0xF0	; 240
 340:	fe 4f       	sbci	r31, 0xFE	; 254
 342:	41 11       	cpse	r20, r1
 344:	04 c0       	rjmp	.+8      	; 0x34e <main+0xac>
		level = 255;
	
	if(level < 0 ) 
		level = 0;

	dimmerLevels[index] = level;
 346:	d9 01       	movw	r26, r18
 348:	a8 5f       	subi	r26, 0xF8	; 248
 34a:	be 4f       	sbci	r27, 0xFE	; 254
 34c:	8c 93       	st	X, r24
		level = 255;
	
	if(level < 0 ) 
		level = 0;
	
	dimmerRequests[index] = level;
 34e:	80 83       	st	Z, r24
 350:	b3 cf       	rjmp	.-154    	; 0x2b8 <main+0x16>

00000352 <_exit>:
 352:	f8 94       	cli

00000354 <__stop_program>:
 354:	ff cf       	rjmp	.-2      	; 0x354 <__stop_program>
