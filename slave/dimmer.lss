
dimmer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000c  00800100  00800100  00000340  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003d0  00000000  00000000  00000a99  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000232  00000000  00000000  00000e69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000135  00000000  00000000  0000109b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  000011d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a8  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a4  00000000  00000000  000014ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	77 c0       	rjmp	.+238    	; 0xf2 <__vector_1>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	95 c0       	rjmp	.+298    	; 0x142 <__vector_11>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	f0 c0       	rjmp	.+480    	; 0x1fe <__vector_14>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ac 30       	cpi	r26, 0x0C	; 12
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	0e d1       	rcall	.+540    	; 0x26e <main>
  52:	3a c1       	rjmp	.+628    	; 0x2c8 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <initIO>:
} dimmers[DIMMER_COUNT];

void initIO (void)
{
	//Set the debug LED as output
	DEBUG_DDR = (1<<DEBUG_LED);
  56:	80 e2       	ldi	r24, 0x20	; 32
  58:	87 b9       	out	0x07, r24	; 7

	//INT0 - ZCD
	EICRA = (1<<ISC01) | (0<<ISC00);
  5a:	82 e0       	ldi	r24, 0x02	; 2
  5c:	80 93 69 00 	sts	0x0069, r24
	EIMSK |= (1<<INT0);
  60:	e8 9a       	sbi	0x1d, 0	; 29

	//Dimming Timer (TODO: Enable/Disable on Dimming request).
	TCCR0A = 	(1 << WGM01);
  62:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 	((1 << CS02) | (1 << CS00));		// CTC Mode - Prescaler 1024
  64:	95 e0       	ldi	r25, 0x05	; 5
  66:	95 bd       	out	0x25, r25	; 37
	OCR0A = 	156;								// ~10ms
  68:	9c e9       	ldi	r25, 0x9C	; 156
  6a:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 	(1 << OCIE0A);
  6c:	80 93 6e 00 	sts	0x006E, r24

	//Set up SPI
	DDRB &= ~((1<<2)|(1<<3)|(1<<5));   // SCK, MOSI and SS as inputs
  70:	84 b1       	in	r24, 0x04	; 4
  72:	83 7d       	andi	r24, 0xD3	; 211
  74:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1<<4);                    // MISO as output
  76:	24 9a       	sbi	0x04, 4	; 4

    SPCR &= ~(1<<MSTR);                // Set as slave 
  78:	8c b5       	in	r24, 0x2c	; 44
  7a:	8f 7e       	andi	r24, 0xEF	; 239
  7c:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1<<SPR0)|(1<<SPR1);       // divide clock by 128
  7e:	8c b5       	in	r24, 0x2c	; 44
  80:	83 60       	ori	r24, 0x03	; 3
  82:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1<<SPE);                  // Enable SPI
  84:	8c b5       	in	r24, 0x2c	; 44
  86:	80 64       	ori	r24, 0x40	; 64
  88:	8c bd       	out	0x2c, r24	; 44

	sei();
  8a:	78 94       	sei
  8c:	08 95       	ret

0000008e <initDimmers>:
}

void initDimmers(void) {
	//Set up the Data Direction Register
	DDRD = (1<<PD0) | (1<<PD1);
  8e:	83 e0       	ldi	r24, 0x03	; 3
  90:	8a b9       	out	0x0a, r24	; 10
	//Set the triacs off.
	PORTD = 0x00;
  92:	8b e2       	ldi	r24, 0x2B	; 43
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	1b b8       	out	0x0b, r1	; 11

	dimmers[0].level_cur = 0;
  98:	10 92 00 01 	sts	0x0100, r1
	dimmers[0].level_req = 0;
  9c:	10 92 01 01 	sts	0x0101, r1
	dimmers[0].port = &PORTD;
  a0:	90 93 03 01 	sts	0x0103, r25
  a4:	80 93 02 01 	sts	0x0102, r24
	dimmers[0].mask = (1<<PD0);
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	20 93 04 01 	sts	0x0104, r18
	
	dimmers[1].level_cur = 0;
  ae:	10 92 05 01 	sts	0x0105, r1
	dimmers[1].level_req = 0;
  b2:	10 92 06 01 	sts	0x0106, r1
	dimmers[1].port = &PORTD;
  b6:	90 93 08 01 	sts	0x0108, r25
  ba:	80 93 07 01 	sts	0x0107, r24
	dimmers[1].mask = (1<<PD1);
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	80 93 09 01 	sts	0x0109, r24
  c4:	08 95       	ret

000000c6 <rampToLevel>:
		level = 255;
	
	if(level < 0 ) 
		level = 0;
	
	dimmers[index].level_req = level;
  c6:	95 e0       	ldi	r25, 0x05	; 5
  c8:	89 9f       	mul	r24, r25
  ca:	f0 01       	movw	r30, r0
  cc:	11 24       	eor	r1, r1
  ce:	e0 50       	subi	r30, 0x00	; 0
  d0:	ff 4f       	sbci	r31, 0xFF	; 255
  d2:	61 83       	std	Z+1, r22	; 0x01
  d4:	08 95       	ret

000000d6 <switchToLevel>:
		level = 255;
	
	if(level < 0 ) 
		level = 0;

	dimmers[index].level_req = level;
  d6:	95 e0       	ldi	r25, 0x05	; 5
  d8:	89 9f       	mul	r24, r25
  da:	f0 01       	movw	r30, r0
  dc:	11 24       	eor	r1, r1
  de:	e0 50       	subi	r30, 0x00	; 0
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	61 83       	std	Z+1, r22	; 0x01
	dimmers[index].level_cur = level;
  e4:	60 83       	st	Z, r22
  e6:	08 95       	ret

000000e8 <debugLed>:
}

void debugLed(uint8_t state) {
	DEBUG_PORT = (state<<DEBUG_LED);
  e8:	82 95       	swap	r24
  ea:	88 0f       	add	r24, r24
  ec:	80 7e       	andi	r24, 0xE0	; 224
  ee:	88 b9       	out	0x08, r24	; 8
  f0:	08 95       	ret

000000f2 <__vector_1>:
}

volatile uint16_t count;
//Zero Cross Detection.
ISR(INT0_vect) {
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	ef 93       	push	r30
 102:	ff 93       	push	r31
	count = 256;
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	90 93 0b 01 	sts	0x010B, r25
 10c:	80 93 0a 01 	sts	0x010A, r24

	TCCR1B |= 	((1 << CS10) | (1 << WGM12));
 110:	e1 e8       	ldi	r30, 0x81	; 129
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	89 60       	ori	r24, 0x09	; 9
 118:	80 83       	st	Z, r24
	OCR1A = 	400;
 11a:	80 e9       	ldi	r24, 0x90	; 144
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	90 93 89 00 	sts	0x0089, r25
 122:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= 	(1 << OCIE1A);	
 126:	ef e6       	ldi	r30, 0x6F	; 111
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	80 83       	st	Z, r24
}
 130:	ff 91       	pop	r31
 132:	ef 91       	pop	r30
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <__vector_11>:

//Zero Cross Timer Interrupt.
ISR(TIMER1_COMPA_vect) {
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	2f 93       	push	r18
 14e:	3f 93       	push	r19
 150:	4f 93       	push	r20
 152:	5f 93       	push	r21
 154:	6f 93       	push	r22
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	count--;
 166:	80 91 0a 01 	lds	r24, 0x010A
 16a:	90 91 0b 01 	lds	r25, 0x010B
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	90 93 0b 01 	sts	0x010B, r25
 174:	80 93 0a 01 	sts	0x010A, r24
 178:	a2 e0       	ldi	r26, 0x02	; 2
 17a:	b1 e0       	ldi	r27, 0x01	; 1
 17c:	e4 e0       	ldi	r30, 0x04	; 4
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
		if(dimmers[i].level_cur > 0 && dimmers[i].level_cur >= count) {
 184:	65 e0       	ldi	r22, 0x05	; 5
 186:	68 9f       	mul	r22, r24
 188:	e0 01       	movw	r28, r0
 18a:	69 9f       	mul	r22, r25
 18c:	d0 0d       	add	r29, r0
 18e:	11 24       	eor	r1, r1
 190:	c0 50       	subi	r28, 0x00	; 0
 192:	df 4f       	sbci	r29, 0xFF	; 255
 194:	28 81       	ld	r18, Y
 196:	22 23       	and	r18, r18
 198:	d1 f0       	breq	.+52     	; 0x1ce <__vector_11+0x8c>
 19a:	48 81       	ld	r20, Y
 19c:	20 91 0a 01 	lds	r18, 0x010A
 1a0:	30 91 0b 01 	lds	r19, 0x010B
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	42 17       	cp	r20, r18
 1a8:	53 07       	cpc	r21, r19
 1aa:	88 f0       	brcs	.+34     	; 0x1ce <__vector_11+0x8c>
			*dimmers[i].port |= dimmers[i].mask;
 1ac:	cd 91       	ld	r28, X+
 1ae:	dc 91       	ld	r29, X
 1b0:	11 97       	sbiw	r26, 0x01	; 1
 1b2:	28 81       	ld	r18, Y
 1b4:	30 81       	ld	r19, Z
 1b6:	23 2b       	or	r18, r19
 1b8:	28 83       	st	Y, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	28 e2       	ldi	r18, 0x28	; 40
 1bc:	2a 95       	dec	r18
 1be:	f1 f7       	brne	.-4      	; 0x1bc <__vector_11+0x7a>
			_delay_us(10);
			*dimmers[i].port ^= dimmers[i].mask;
 1c0:	cd 91       	ld	r28, X+
 1c2:	dc 91       	ld	r29, X
 1c4:	11 97       	sbiw	r26, 0x01	; 1
 1c6:	28 81       	ld	r18, Y
 1c8:	30 81       	ld	r19, Z
 1ca:	23 27       	eor	r18, r19
 1cc:	28 83       	st	Y, r18
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	15 96       	adiw	r26, 0x05	; 5
 1d2:	35 96       	adiw	r30, 0x05	; 5
}

//Zero Cross Timer Interrupt.
ISR(TIMER1_COMPA_vect) {
	count--;
	for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	91 05       	cpc	r25, r1
 1d8:	b1 f6       	brne	.-84     	; 0x186 <__vector_11+0x44>
			*dimmers[i].port |= dimmers[i].mask;
			_delay_us(10);
			*dimmers[i].port ^= dimmers[i].mask;
		}
	}
}
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	6f 91       	pop	r22
 1ec:	5f 91       	pop	r21
 1ee:	4f 91       	pop	r20
 1f0:	3f 91       	pop	r19
 1f2:	2f 91       	pop	r18
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <__vector_14>:

//Dimming Interrupt
ISR(TIMER0_COMPA_vect) {
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	11 24       	eor	r1, r1
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
	for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
		if(dimmers[i].level_req > dimmers[i].level_cur) {
 20c:	90 91 01 01 	lds	r25, 0x0101
 210:	80 91 00 01 	lds	r24, 0x0100
 214:	89 17       	cp	r24, r25
 216:	50 f0       	brcs	.+20     	; 0x22c <__vector_14+0x2e>
			dimmers[i].level_cur++;
		} else if(dimmers[i].level_req < dimmers[i].level_cur) {
 218:	90 91 01 01 	lds	r25, 0x0101
 21c:	80 91 00 01 	lds	r24, 0x0100
 220:	98 17       	cp	r25, r24
 222:	48 f4       	brcc	.+18     	; 0x236 <__vector_14+0x38>
			dimmers[i].level_cur--;
 224:	80 91 00 01 	lds	r24, 0x0100
 228:	81 50       	subi	r24, 0x01	; 1
 22a:	03 c0       	rjmp	.+6      	; 0x232 <__vector_14+0x34>

//Dimming Interrupt
ISR(TIMER0_COMPA_vect) {
	for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
		if(dimmers[i].level_req > dimmers[i].level_cur) {
			dimmers[i].level_cur++;
 22c:	80 91 00 01 	lds	r24, 0x0100
 230:	8f 5f       	subi	r24, 0xFF	; 255
 232:	80 93 00 01 	sts	0x0100, r24
}

//Dimming Interrupt
ISR(TIMER0_COMPA_vect) {
	for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
		if(dimmers[i].level_req > dimmers[i].level_cur) {
 236:	90 91 06 01 	lds	r25, 0x0106
 23a:	80 91 05 01 	lds	r24, 0x0105
 23e:	89 17       	cp	r24, r25
 240:	20 f4       	brcc	.+8      	; 0x24a <__vector_14+0x4c>
			dimmers[i].level_cur++;
 242:	80 91 05 01 	lds	r24, 0x0105
 246:	8f 5f       	subi	r24, 0xFF	; 255
 248:	09 c0       	rjmp	.+18     	; 0x25c <__vector_14+0x5e>
		} else if(dimmers[i].level_req < dimmers[i].level_cur) {
 24a:	90 91 06 01 	lds	r25, 0x0106
 24e:	80 91 05 01 	lds	r24, 0x0105
 252:	98 17       	cp	r25, r24
 254:	28 f4       	brcc	.+10     	; 0x260 <__vector_14+0x62>
			dimmers[i].level_cur--;
 256:	80 91 05 01 	lds	r24, 0x0105
 25a:	81 50       	subi	r24, 0x01	; 1
 25c:	80 93 05 01 	sts	0x0105, r24
		}
	
	}
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <main>:
	dimmers[1].port = &PORTD;
	dimmers[1].mask = (1<<PD1);
}

int main (void)
{
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	00 d0       	rcall	.+0      	; 0x274 <main+0x6>
 274:	00 d0       	rcall	.+0      	; 0x276 <main+0x8>
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
	initIO(); //Setup IO pins and defaults
 27a:	ed de       	rcall	.-550    	; 0x56 <initIO>
	initDimmers(); //Set up the dimmers.
 27c:	08 df       	rcall	.-496    	; 0x8e <initDimmers>

	char commandBuffer[4];
	uint8_t count = 0;
 27e:	80 e0       	ldi	r24, 0x00	; 0
        	} else {
				rampToLevel((uint8_t)commandBuffer[2], (uint8_t)commandBuffer[3]);
        	}

        	//Toggle the Debug LED
        	DEBUG_PORT ^= (1 << DEBUG_LED);
 280:	20 e2       	ldi	r18, 0x20	; 32
		level = 255;
	
	if(level < 0 ) 
		level = 0;
	
	dimmers[index].level_req = level;
 282:	95 e0       	ldi	r25, 0x05	; 5
	char commandBuffer[4];
	uint8_t count = 0;

	while(1) {

		while(!(SPSR & (1<<SPIF)));
 284:	0d b4       	in	r0, 0x2d	; 45
 286:	07 fe       	sbrs	r0, 7
 288:	fd cf       	rjmp	.-6      	; 0x284 <main+0x16>

        commandBuffer[count++] = SPDR;
 28a:	3e b5       	in	r19, 0x2e	; 46
 28c:	e1 e0       	ldi	r30, 0x01	; 1
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	ec 0f       	add	r30, r28
 292:	fd 1f       	adc	r31, r29
 294:	e8 0f       	add	r30, r24
 296:	f1 1d       	adc	r31, r1
 298:	30 83       	st	Z, r19
 29a:	8f 5f       	subi	r24, 0xFF	; 255

        if(commandBuffer[0] == CMD_SET && count == 4) {
 29c:	39 81       	ldd	r19, Y+1	; 0x01
 29e:	31 30       	cpi	r19, 0x01	; 1
 2a0:	89 f7       	brne	.-30     	; 0x284 <main+0x16>
 2a2:	84 30       	cpi	r24, 0x04	; 4
 2a4:	79 f7       	brne	.-34     	; 0x284 <main+0x16>
        	//We have all our data        	
        	if(commandBuffer[1] == METHOD_SWITCH) {
 2a6:	3a 81       	ldd	r19, Y+2	; 0x02
 2a8:	8c 81       	ldd	r24, Y+4	; 0x04
 2aa:	eb 81       	ldd	r30, Y+3	; 0x03
		level = 255;
	
	if(level < 0 ) 
		level = 0;

	dimmers[index].level_req = level;
 2ac:	9e 9f       	mul	r25, r30
 2ae:	f0 01       	movw	r30, r0
 2b0:	11 24       	eor	r1, r1
 2b2:	e0 50       	subi	r30, 0x00	; 0
 2b4:	ff 4f       	sbci	r31, 0xFF	; 255
 2b6:	81 83       	std	Z+1, r24	; 0x01

        commandBuffer[count++] = SPDR;

        if(commandBuffer[0] == CMD_SET && count == 4) {
        	//We have all our data        	
        	if(commandBuffer[1] == METHOD_SWITCH) {
 2b8:	31 11       	cpse	r19, r1
 2ba:	01 c0       	rjmp	.+2      	; 0x2be <main+0x50>
	
	if(level < 0 ) 
		level = 0;

	dimmers[index].level_req = level;
	dimmers[index].level_cur = level;
 2bc:	80 83       	st	Z, r24
        	} else {
				rampToLevel((uint8_t)commandBuffer[2], (uint8_t)commandBuffer[3]);
        	}

        	//Toggle the Debug LED
        	DEBUG_PORT ^= (1 << DEBUG_LED);
 2be:	88 b1       	in	r24, 0x08	; 8
 2c0:	82 27       	eor	r24, r18
 2c2:	88 b9       	out	0x08, r24	; 8

        	count = 0;
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	de cf       	rjmp	.-68     	; 0x284 <main+0x16>

000002c8 <_exit>:
 2c8:	f8 94       	cli

000002ca <__stop_program>:
 2ca:	ff cf       	rjmp	.-2      	; 0x2ca <__stop_program>
