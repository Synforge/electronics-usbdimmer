   1               		.file	"dimmer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               	.global	initIO
  11               	initIO:
  12               	.LFB7:
  13               		.file 1 "dimmer.c"
   1:dimmer.c      **** #include <dimmer.h>
   2:dimmer.c      **** 
   3:dimmer.c      **** #include <avr/io.h>
   4:dimmer.c      **** #include <avr/interrupt.h>
   5:dimmer.c      **** #include <avr/pgmspace.h>
   6:dimmer.c      **** #include <avr/eeprom.h>
   7:dimmer.c      **** #include <avr/wdt.h>
   8:dimmer.c      **** 
   9:dimmer.c      **** #include <util/delay.h>
  10:dimmer.c      **** 
  11:dimmer.c      **** #define TRUE 			1
  12:dimmer.c      **** #define FALSE 			0
  13:dimmer.c      **** 
  14:dimmer.c      **** #define MAX_SIZE 		2048
  15:dimmer.c      **** 
  16:dimmer.c      **** #define DEBUG_DDR 		DDRC
  17:dimmer.c      **** #define DEBUG_PORT		PORTC
  18:dimmer.c      **** #define DEBUG_LED 		PC5
  19:dimmer.c      **** 
  20:dimmer.c      **** #define CMD_SET 		0x01
  21:dimmer.c      **** 
  22:dimmer.c      **** #define METHOD_SWITCH 	0x00
  23:dimmer.c      **** #define METHOD_RAMP 	0x01
  24:dimmer.c      **** 
  25:dimmer.c      **** #define DIMMER_PORT		PORTD
  26:dimmer.c      **** #define DIMMER_COUNT	2
  27:dimmer.c      **** 
  28:dimmer.c      **** uint8_t dimmerMasks[2] = {(1<<PC0),(1<<PC1)};
  29:dimmer.c      **** volatile uint8_t dimmerRequests[2] = {0,0};
  30:dimmer.c      **** volatile uint8_t dimmerLevels[2] = {0,0};
  31:dimmer.c      **** 
  32:dimmer.c      **** 
  33:dimmer.c      **** void initIO (void)
  34:dimmer.c      **** {
  14               		.loc 1 34 0
  15               	/* prologue: function */
  16               	/* frame size = 0 */
  17               	/* stack size = 0 */
  18               	.L__stack_usage = 0
  35:dimmer.c      **** 	//Set the debug LED as output
  36:dimmer.c      **** 	DEBUG_DDR = (1<<DEBUG_LED);
  19               		.loc 1 36 0
  20 0000 80E2      		ldi r24,lo8(32)
  21 0002 87B9      		out 0x7,r24
  37:dimmer.c      **** 
  38:dimmer.c      **** 	//INT0 - ZCD
  39:dimmer.c      **** 	EICRA = (1<<ISC01) | (0<<ISC00);
  22               		.loc 1 39 0
  23 0004 82E0      		ldi r24,lo8(2)
  24 0006 8093 6900 		sts 105,r24
  40:dimmer.c      **** 	EIMSK |= (1<<INT0);
  25               		.loc 1 40 0
  26 000a E89A      		sbi 0x1d,0
  41:dimmer.c      **** 
  42:dimmer.c      **** 	//Dimming Timer
  43:dimmer.c      **** 	TCCR0A = 	(1 << WGM01);
  27               		.loc 1 43 0
  28 000c 84BD      		out 0x24,r24
  44:dimmer.c      **** 	TCCR0B = 	((1 << CS02) | (1 << CS00));		// CTC Mode - Prescaler 1024
  29               		.loc 1 44 0
  30 000e 95E0      		ldi r25,lo8(5)
  31 0010 95BD      		out 0x25,r25
  45:dimmer.c      **** 	OCR0A = 	156;								// ~10ms
  32               		.loc 1 45 0
  33 0012 9CE9      		ldi r25,lo8(-100)
  34 0014 97BD      		out 0x27,r25
  46:dimmer.c      **** 	TIMSK0 = 	(1 << OCIE0A);
  35               		.loc 1 46 0
  36 0016 8093 6E00 		sts 110,r24
  47:dimmer.c      **** 
  48:dimmer.c      **** 	//Set up SPI
  49:dimmer.c      **** 	DDRB &= ~((1<<2)|(1<<3)|(1<<5));   // SCK, MOSI and SS as inputs
  37               		.loc 1 49 0
  38 001a 84B1      		in r24,0x4
  39 001c 837D      		andi r24,lo8(-45)
  40 001e 84B9      		out 0x4,r24
  50:dimmer.c      ****     DDRB |= (1<<4);                    // MISO as output
  41               		.loc 1 50 0
  42 0020 249A      		sbi 0x4,4
  51:dimmer.c      **** 
  52:dimmer.c      ****     SPCR &= ~(1<<MSTR);                // Set as slave 
  43               		.loc 1 52 0
  44 0022 8CB5      		in r24,0x2c
  45 0024 8F7E      		andi r24,lo8(-17)
  46 0026 8CBD      		out 0x2c,r24
  53:dimmer.c      ****     SPCR |= (1<<SPR0)|(1<<SPR1);       // divide clock by 128
  47               		.loc 1 53 0
  48 0028 8CB5      		in r24,0x2c
  49 002a 8360      		ori r24,lo8(3)
  50 002c 8CBD      		out 0x2c,r24
  54:dimmer.c      ****     SPCR |= (1<<SPE);                  // Enable SPI
  51               		.loc 1 54 0
  52 002e 8CB5      		in r24,0x2c
  53 0030 8064      		ori r24,lo8(64)
  54 0032 8CBD      		out 0x2c,r24
  55:dimmer.c      **** 
  56:dimmer.c      **** 	sei();
  55               		.loc 1 56 0
  56               	/* #APP */
  57               	 ;  56 "dimmer.c" 1
  58 0034 7894      		sei
  59               	 ;  0 "" 2
  60               	/* #NOAPP */
  61 0036 0895      		ret
  62               	.LFE7:
  64               	.global	initDimmers
  66               	initDimmers:
  67               	.LFB8:
  57:dimmer.c      **** }
  58:dimmer.c      **** 
  59:dimmer.c      **** void initDimmers(void) {
  68               		.loc 1 59 0
  69               	/* prologue: function */
  70               	/* frame size = 0 */
  71               	/* stack size = 0 */
  72               	.L__stack_usage = 0
  60:dimmer.c      **** 	//Set up the Data Direction Register
  61:dimmer.c      **** 	DDRD = (1<<PD0) | (1<<PD1);
  73               		.loc 1 61 0
  74 0038 83E0      		ldi r24,lo8(3)
  75 003a 8AB9      		out 0xa,r24
  62:dimmer.c      **** 	//Set the triacs off.
  63:dimmer.c      **** 	PORTD = 0x00;
  76               		.loc 1 63 0
  77 003c 1BB8      		out 0xb,__zero_reg__
  78 003e 0895      		ret
  79               	.LFE8:
  81               	.global	spi_read
  83               	spi_read:
  84               	.LFB9:
  64:dimmer.c      **** }
  65:dimmer.c      **** 
  66:dimmer.c      **** unsigned char *spi_read(uint8_t bytes, unsigned char c[]) 
  67:dimmer.c      **** {
  85               		.loc 1 67 0
  86               	.LVL0:
  87               	/* prologue: function */
  88               	/* frame size = 0 */
  89               	/* stack size = 0 */
  90               	.L__stack_usage = 0
  91 0040 972F      		mov r25,r23
  92               	.LVL1:
  93               	.LBB10:
  68:dimmer.c      **** 	for(uint8_t i = 0; i < bytes; i++) {
  94               		.loc 1 68 0
  95 0042 E62F      		mov r30,r22
  96 0044 F72F      		mov r31,r23
  97 0046 00C0      		rjmp .L4
  98               	.LVL2:
  99               	.L6:
  69:dimmer.c      **** 		while(!(SPSR & (1<<SPIF)));
 100               		.loc 1 69 0
 101 0048 0DB4      		in __tmp_reg__,0x2d
 102 004a 07FE      		sbrs __tmp_reg__,7
 103 004c 00C0      		rjmp .L6
  70:dimmer.c      **** 		c[i] = SPDR;
 104               		.loc 1 70 0
 105 004e 2EB5      		in r18,0x2e
 106 0050 2193      		st Z+,r18
 107               	.L4:
  68:dimmer.c      **** 	for(uint8_t i = 0; i < bytes; i++) {
 108               		.loc 1 68 0 discriminator 1
 109 0052 2E2F      		mov r18,r30
 110 0054 261B      		sub r18,r22
 111 0056 2817      		cp r18,r24
 112 0058 00F0      		brlo .L6
 113               	.LBE10:
  71:dimmer.c      **** 	}
  72:dimmer.c      **** 
  73:dimmer.c      **** 	return c;
  74:dimmer.c      **** } 
 114               		.loc 1 74 0
 115 005a 862F      		mov r24,r22
 116               	.LVL3:
 117 005c 0895      		ret
 118               	.LFE9:
 120               		.section	.text.startup,"ax",@progbits
 121               	.global	main
 123               	main:
 124               	.LFB10:
  75:dimmer.c      **** 
  76:dimmer.c      **** int main (void)
  77:dimmer.c      **** {
 125               		.loc 1 77 0
 126 0000 CF93      		push r28
 127               	.LCFI0:
 128 0002 DF93      		push r29
 129               	.LCFI1:
 130 0004 00D0      		rcall .
 131 0006 1F92      		push __zero_reg__
 132               	.LCFI2:
 133 0008 CDB7      		in r28,__SP_L__
 134 000a DEB7      		in r29,__SP_H__
 135               	.LCFI3:
 136               	/* prologue: function */
 137               	/* frame size = 3 */
 138               	/* stack size = 5 */
 139               	.L__stack_usage = 5
  78:dimmer.c      **** 	initIO(); //Setup IO pins and defaults
 140               		.loc 1 78 0
 141 000c 00D0      		rcall initIO
 142               	.LVL4:
  79:dimmer.c      **** 	initDimmers(); //Set up the dimmers.
 143               		.loc 1 79 0
 144 000e 00D0      		rcall initDimmers
 145               	.LVL5:
 146               	.L15:
  80:dimmer.c      **** 
  81:dimmer.c      **** 	while(1) {
  82:dimmer.c      **** 
  83:dimmer.c      **** 		while(!(SPSR & (1<<SPIF)));
 147               		.loc 1 83 0 discriminator 1
 148 0010 0DB4      		in __tmp_reg__,0x2d
 149 0012 07FE      		sbrs __tmp_reg__,7
 150 0014 00C0      		rjmp .L15
  84:dimmer.c      **** 
  85:dimmer.c      ****         if(SPDR == CMD_SET) {
 151               		.loc 1 85 0
 152 0016 8EB5      		in r24,0x2e
 153 0018 8130      		cpi r24,lo8(1)
 154 001a 01F4      		brne .L15
 155               	.LBB11:
  86:dimmer.c      ****         	//Read the next 3 bytes
  87:dimmer.c      ****         	unsigned char c[3];
  88:dimmer.c      ****         	spi_read(3, c);
 156               		.loc 1 88 0
 157 001c BE01      		movw r22,r28
 158 001e 6F5F      		subi r22,-1
 159 0020 7F4F      		sbci r23,-1
 160 0022 83E0      		ldi r24,lo8(3)
 161 0024 00D0      		rcall spi_read
 162               	.LVL6:
  89:dimmer.c      **** 
  90:dimmer.c      ****         	if(c[0] == METHOD_SWITCH) {
 163               		.loc 1 90 0
 164 0026 9981      		ldd r25,Y+1
 165 0028 8B81      		ldd r24,Y+3
 166 002a EA81      		ldd r30,Y+2
 167               	.LBB12:
 168               	.LBB13:
  91:dimmer.c      ****         		switchToLevel((uint8_t)c[1], (uint8_t)c[2]);
  92:dimmer.c      ****         	} else {
  93:dimmer.c      **** 				rampToLevel((uint8_t)c[1], (uint8_t)c[2]);
  94:dimmer.c      ****         	}
  95:dimmer.c      **** 
  96:dimmer.c      ****         }
  97:dimmer.c      **** 
  98:dimmer.c      **** 	}
  99:dimmer.c      **** 
 100:dimmer.c      **** 	return(0);
 101:dimmer.c      **** }
 102:dimmer.c      **** 
 103:dimmer.c      **** ISR(SPI_STC_vect)
 104:dimmer.c      **** {
 105:dimmer.c      **** 	DEBUG_PORT = (1 << DEBUG_LED);
 106:dimmer.c      **** }
 107:dimmer.c      **** 
 108:dimmer.c      **** void rampToLevel(uint8_t index, uint8_t level) {
 109:dimmer.c      **** 	if(level > 255)
 110:dimmer.c      **** 		level = 255;
 111:dimmer.c      **** 	
 112:dimmer.c      **** 	if(level < 0 ) 
 113:dimmer.c      **** 		level = 0;
 114:dimmer.c      **** 	
 115:dimmer.c      **** 	dimmerRequests[index] = level;
 116:dimmer.c      **** }
 117:dimmer.c      **** 
 118:dimmer.c      **** void switchToLevel(uint8_t index, uint8_t level) {
 119:dimmer.c      **** 	if(level > 255)
 120:dimmer.c      **** 		level = 255;
 121:dimmer.c      **** 	
 122:dimmer.c      **** 	if(level < 0 ) 
 123:dimmer.c      **** 		level = 0;
 124:dimmer.c      **** 
 125:dimmer.c      **** 	dimmerLevels[index] = level;
 169               		.loc 1 125 0
 170 002c F0E0      		ldi r31,0
 171               	.LBE13:
 172               	.LBE12:
  90:dimmer.c      ****         	if(c[0] == METHOD_SWITCH) {
 173               		.loc 1 90 0
 174 002e 9111      		cpse r25,__zero_reg__
 175 0030 00C0      		rjmp .L16
 176               	.LVL7:
 177               	.LBB15:
 178               	.LBB14:
 179               		.loc 1 125 0
 180 0032 DF01      		movw r26,r30
 181 0034 A050      		subi r26,lo8(-(dimmerLevels))
 182 0036 B040      		sbci r27,hi8(-(dimmerLevels))
 183 0038 8C93      		st X,r24
 184               	.LVL8:
 185               	.L16:
 186               	.LBE14:
 187               	.LBE15:
 188               	.LBB16:
 189               	.LBB17:
 115:dimmer.c      **** 	dimmerRequests[index] = level;
 190               		.loc 1 115 0
 191 003a E050      		subi r30,lo8(-(dimmerRequests))
 192 003c F040      		sbci r31,hi8(-(dimmerRequests))
 193 003e 8083      		st Z,r24
 194 0040 00C0      		rjmp .L15
 195               	.LBE17:
 196               	.LBE16:
 197               	.LBE11:
 198               	.LFE10:
 200               		.text
 201               	.global	__vector_17
 203               	__vector_17:
 204               	.LFB11:
 104:dimmer.c      **** {
 205               		.loc 1 104 0
 206 005e 1F92      		push r1
 207               	.LCFI4:
 208 0060 0F92      		push r0
 209               	.LCFI5:
 210 0062 0FB6      		in r0,__SREG__
 211 0064 0F92      		push r0
 212 0066 1124      		clr __zero_reg__
 213 0068 8F93      		push r24
 214               	.LCFI6:
 215               	/* prologue: Signal */
 216               	/* frame size = 0 */
 217               	/* stack size = 4 */
 218               	.L__stack_usage = 4
 105:dimmer.c      **** 	DEBUG_PORT = (1 << DEBUG_LED);
 219               		.loc 1 105 0
 220 006a 80E2      		ldi r24,lo8(32)
 221 006c 88B9      		out 0x8,r24
 222               	/* epilogue start */
 106:dimmer.c      **** }
 223               		.loc 1 106 0
 224 006e 8F91      		pop r24
 225 0070 0F90      		pop r0
 226 0072 0FBE      		out __SREG__,r0
 227 0074 0F90      		pop r0
 228 0076 1F90      		pop r1
 229 0078 1895      		reti
 230               	.LFE11:
 232               	.global	rampToLevel
 234               	rampToLevel:
 235               	.LFB12:
 108:dimmer.c      **** void rampToLevel(uint8_t index, uint8_t level) {
 236               		.loc 1 108 0
 237               	.LVL9:
 238               	/* prologue: function */
 239               	/* frame size = 0 */
 240               	/* stack size = 0 */
 241               	.L__stack_usage = 0
 115:dimmer.c      **** 	dimmerRequests[index] = level;
 242               		.loc 1 115 0
 243 007a E82F      		mov r30,r24
 244 007c F0E0      		ldi r31,0
 245 007e E050      		subi r30,lo8(-(dimmerRequests))
 246 0080 F040      		sbci r31,hi8(-(dimmerRequests))
 247 0082 6083      		st Z,r22
 248 0084 0895      		ret
 249               	.LFE12:
 251               	.global	switchToLevel
 253               	switchToLevel:
 254               	.LFB13:
 118:dimmer.c      **** void switchToLevel(uint8_t index, uint8_t level) {
 255               		.loc 1 118 0
 256               	.LVL10:
 257               	/* prologue: function */
 258               	/* frame size = 0 */
 259               	/* stack size = 0 */
 260               	.L__stack_usage = 0
 261               		.loc 1 125 0
 262 0086 90E0      		ldi r25,0
 263 0088 FC01      		movw r30,r24
 264 008a E050      		subi r30,lo8(-(dimmerLevels))
 265 008c F040      		sbci r31,hi8(-(dimmerLevels))
 266 008e 6083      		st Z,r22
 126:dimmer.c      **** 	dimmerRequests[index] = level;
 267               		.loc 1 126 0
 268 0090 FC01      		movw r30,r24
 269 0092 E050      		subi r30,lo8(-(dimmerRequests))
 270 0094 F040      		sbci r31,hi8(-(dimmerRequests))
 271 0096 6083      		st Z,r22
 272 0098 0895      		ret
 273               	.LFE13:
 275               	.global	debugLed
 277               	debugLed:
 278               	.LFB14:
 127:dimmer.c      **** }
 128:dimmer.c      **** 
 129:dimmer.c      **** void debugLed(uint8_t state) {
 279               		.loc 1 129 0
 280               	.LVL11:
 281               	/* prologue: function */
 282               	/* frame size = 0 */
 283               	/* stack size = 0 */
 284               	.L__stack_usage = 0
 130:dimmer.c      **** 	DEBUG_PORT = (state<<DEBUG_LED);
 285               		.loc 1 130 0
 286 009a 8295      		swap r24
 287               	.LVL12:
 288 009c 880F      		lsl r24
 289 009e 807E      		andi r24,lo8(-32)
 290 00a0 88B9      		out 0x8,r24
 291 00a2 0895      		ret
 292               	.LFE14:
 294               	.global	__vector_1
 296               	__vector_1:
 297               	.LFB15:
 131:dimmer.c      **** }
 132:dimmer.c      **** 
 133:dimmer.c      **** volatile uint16_t count;
 134:dimmer.c      **** //Zero Cross Detection.
 135:dimmer.c      **** ISR(INT0_vect) {
 298               		.loc 1 135 0
 299 00a4 1F92      		push r1
 300               	.LCFI7:
 301 00a6 0F92      		push r0
 302               	.LCFI8:
 303 00a8 0FB6      		in r0,__SREG__
 304 00aa 0F92      		push r0
 305 00ac 1124      		clr __zero_reg__
 306 00ae 8F93      		push r24
 307               	.LCFI9:
 308 00b0 9F93      		push r25
 309               	.LCFI10:
 310 00b2 EF93      		push r30
 311               	.LCFI11:
 312 00b4 FF93      		push r31
 313               	.LCFI12:
 314               	/* prologue: Signal */
 315               	/* frame size = 0 */
 316               	/* stack size = 7 */
 317               	.L__stack_usage = 7
 136:dimmer.c      **** 	count = 256;
 318               		.loc 1 136 0
 319 00b6 80E0      		ldi r24,0
 320 00b8 91E0      		ldi r25,lo8(1)
 321 00ba 9093 0000 		sts count+1,r25
 322 00be 8093 0000 		sts count,r24
 137:dimmer.c      **** 
 138:dimmer.c      **** 	TCCR1B |= 	((1 << CS10) | (1 << WGM12));
 323               		.loc 1 138 0
 324 00c2 E1E8      		ldi r30,lo8(-127)
 325 00c4 F0E0      		ldi r31,0
 326 00c6 8081      		ld r24,Z
 327 00c8 8960      		ori r24,lo8(9)
 328 00ca 8083      		st Z,r24
 139:dimmer.c      **** 	OCR1A = 	400;
 329               		.loc 1 139 0
 330 00cc 80E9      		ldi r24,lo8(-112)
 331 00ce 91E0      		ldi r25,lo8(1)
 332 00d0 9093 8900 		sts 136+1,r25
 333 00d4 8093 8800 		sts 136,r24
 140:dimmer.c      **** 	TIMSK1 |= 	(1 << OCIE1A);	
 334               		.loc 1 140 0
 335 00d8 EFE6      		ldi r30,lo8(111)
 336 00da F0E0      		ldi r31,0
 337 00dc 8081      		ld r24,Z
 338 00de 8260      		ori r24,lo8(2)
 339 00e0 8083      		st Z,r24
 340               	/* epilogue start */
 141:dimmer.c      **** }
 341               		.loc 1 141 0
 342 00e2 FF91      		pop r31
 343 00e4 EF91      		pop r30
 344 00e6 9F91      		pop r25
 345 00e8 8F91      		pop r24
 346 00ea 0F90      		pop r0
 347 00ec 0FBE      		out __SREG__,r0
 348 00ee 0F90      		pop r0
 349 00f0 1F90      		pop r1
 350 00f2 1895      		reti
 351               	.LFE15:
 353               	.global	__vector_11
 355               	__vector_11:
 356               	.LFB16:
 142:dimmer.c      **** 
 143:dimmer.c      **** //Zero Cross Timer Interrupt.
 144:dimmer.c      **** ISR(TIMER1_COMPA_vect) {
 357               		.loc 1 144 0
 358 00f4 1F92      		push r1
 359               	.LCFI13:
 360 00f6 0F92      		push r0
 361               	.LCFI14:
 362 00f8 0FB6      		in r0,__SREG__
 363 00fa 0F92      		push r0
 364 00fc 1124      		clr __zero_reg__
 365 00fe 2F93      		push r18
 366               	.LCFI15:
 367 0100 3F93      		push r19
 368               	.LCFI16:
 369 0102 8F93      		push r24
 370               	.LCFI17:
 371 0104 9F93      		push r25
 372               	.LCFI18:
 373               	/* prologue: Signal */
 374               	/* frame size = 0 */
 375               	/* stack size = 7 */
 376               	.L__stack_usage = 7
 145:dimmer.c      **** 	count--;
 377               		.loc 1 145 0
 378 0106 8091 0000 		lds r24,count
 379 010a 9091 0000 		lds r25,count+1
 380 010e 0197      		sbiw r24,1
 381 0110 9093 0000 		sts count+1,r25
 382 0114 8093 0000 		sts count,r24
 383               	.LVL13:
 384               	.LBB18:
 146:dimmer.c      **** 
 147:dimmer.c      **** 	for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
 148:dimmer.c      **** 		if(dimmerLevels[i] >= count) {
 385               		.loc 1 148 0
 386 0118 2091 0000 		lds r18,dimmerLevels
 387 011c 8091 0000 		lds r24,count
 388 0120 9091 0000 		lds r25,count+1
 389 0124 30E0      		ldi r19,0
 390 0126 2817      		cp r18,r24
 391 0128 3907      		cpc r19,r25
 392 012a 00F0      		brlo .L23
 149:dimmer.c      **** 			DIMMER_PORT |= dimmerMasks[i];
 393               		.loc 1 149 0
 394 012c 8BB1      		in r24,0xb
 395 012e 9091 0000 		lds r25,dimmerMasks
 396 0132 892B      		or r24,r25
 397 0134 8BB9      		out 0xb,r24
 398               	.LVL14:
 399               	.LBB19:
 400               	.LBB20:
 401               		.file 2 "/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h"
   1:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  46:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \code
  49:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  54:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     used.
  58:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  59:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  68:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  77:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  81:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** */
  82:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  87:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  88:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  93:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  94:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  97:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
 103:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 104:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /**
 105:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 107:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 109:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 112:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 114:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 120:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 125:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 129:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 132:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 140:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****  */
 141:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** void
 142:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** {
 144:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 153:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 156:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 159:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#else
 160:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#endif
 163:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 164:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 165:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 166:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #else
 167:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	{
 172:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		{
 176:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 			__ticks --;
 179:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		}
 180:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		return;
 181:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	}
 182:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	else
 183:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
 186:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** }
 187:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 188:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /**
 189:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 191:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 193:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 196:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 198:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 202:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   
 207:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 211:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****  
 214:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 222:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****  */
 223:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** void
 224:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** {
 226:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	uint8_t __ticks;
 227:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	double __tmp ; 
 228:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 229:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 230:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 231:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 232:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 233:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 234:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 235:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 236:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 237:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 238:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 239:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 240:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 241:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#else
 242:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		//round up by default
 243:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 244:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#endif
 245:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 246:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 402               		.loc 2 246 0
 403 0136 88E2      		ldi r24,lo8(40)
 404 0138 8A95      		1: dec r24
 405 013a 01F4      		brne 1b
 406               	.LBE20:
 407               	.LBE19:
 150:dimmer.c      **** 			_delay_us(10);
 151:dimmer.c      **** 	 		DIMMER_PORT ^= dimmerMasks[i];
 408               		.loc 1 151 0
 409 013c 8BB1      		in r24,0xb
 410 013e 9091 0000 		lds r25,dimmerMasks
 411 0142 8927      		eor r24,r25
 412 0144 8BB9      		out 0xb,r24
 413               	.LVL15:
 414               	.L23:
 148:dimmer.c      **** 		if(dimmerLevels[i] >= count) {
 415               		.loc 1 148 0
 416 0146 2091 0000 		lds r18,dimmerLevels+1
 417 014a 8091 0000 		lds r24,count
 418 014e 9091 0000 		lds r25,count+1
 419 0152 30E0      		ldi r19,0
 420 0154 2817      		cp r18,r24
 421 0156 3907      		cpc r19,r25
 422 0158 00F0      		brlo .L22
 149:dimmer.c      **** 			DIMMER_PORT |= dimmerMasks[i];
 423               		.loc 1 149 0
 424 015a 8BB1      		in r24,0xb
 425 015c 9091 0000 		lds r25,dimmerMasks+1
 426 0160 892B      		or r24,r25
 427 0162 8BB9      		out 0xb,r24
 428               	.LVL16:
 429               	.LBB22:
 430               	.LBB21:
 431               		.loc 2 246 0
 432 0164 88E2      		ldi r24,lo8(40)
 433 0166 8A95      		1: dec r24
 434 0168 01F4      		brne 1b
 435               	.LBE21:
 436               	.LBE22:
 437               		.loc 1 151 0
 438 016a 8BB1      		in r24,0xb
 439 016c 9091 0000 		lds r25,dimmerMasks+1
 440 0170 8927      		eor r24,r25
 441 0172 8BB9      		out 0xb,r24
 442               	.LVL17:
 443               	.L22:
 444               	/* epilogue start */
 445               	.LBE18:
 152:dimmer.c      **** 		}
 153:dimmer.c      **** 	}
 154:dimmer.c      **** 
 155:dimmer.c      **** }
 446               		.loc 1 155 0
 447 0174 9F91      		pop r25
 448 0176 8F91      		pop r24
 449 0178 3F91      		pop r19
 450 017a 2F91      		pop r18
 451 017c 0F90      		pop r0
 452 017e 0FBE      		out __SREG__,r0
 453 0180 0F90      		pop r0
 454 0182 1F90      		pop r1
 455 0184 1895      		reti
 456               	.LFE16:
 458               	.global	__vector_14
 460               	__vector_14:
 461               	.LFB17:
 156:dimmer.c      **** 
 157:dimmer.c      **** //Dimming Interrupt
 158:dimmer.c      **** ISR(TIMER0_COMPA_vect) {
 462               		.loc 1 158 0
 463 0186 1F92      		push r1
 464               	.LCFI19:
 465 0188 0F92      		push r0
 466               	.LCFI20:
 467 018a 0FB6      		in r0,__SREG__
 468 018c 0F92      		push r0
 469 018e 1124      		clr __zero_reg__
 470 0190 8F93      		push r24
 471               	.LCFI21:
 472 0192 9F93      		push r25
 473               	.LCFI22:
 474               	/* prologue: Signal */
 475               	/* frame size = 0 */
 476               	/* stack size = 5 */
 477               	.L__stack_usage = 5
 478               	.LVL18:
 479               	.LBB23:
 159:dimmer.c      **** 
 160:dimmer.c      **** 	for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
 161:dimmer.c      **** 		if(dimmerRequests[i] > dimmerLevels[i]) {
 480               		.loc 1 161 0
 481 0194 9091 0000 		lds r25,dimmerRequests
 482 0198 8091 0000 		lds r24,dimmerLevels
 483 019c 8917      		cp r24,r25
 484 019e 00F0      		brlo .L26
 162:dimmer.c      **** 			dimmerLevels[i]++;
 163:dimmer.c      **** 		} else if(dimmerRequests[i] < dimmerLevels[i]) {
 485               		.loc 1 163 0
 486 01a0 9091 0000 		lds r25,dimmerRequests
 487 01a4 8091 0000 		lds r24,dimmerLevels
 488 01a8 9817      		cp r25,r24
 489 01aa 00F4      		brsh .L27
 164:dimmer.c      **** 			dimmerLevels[i]--;
 490               		.loc 1 164 0
 491 01ac 8091 0000 		lds r24,dimmerLevels
 492 01b0 8150      		subi r24,lo8(-(-1))
 493 01b2 00C0      		rjmp .L30
 494               	.L26:
 162:dimmer.c      **** 			dimmerLevels[i]++;
 495               		.loc 1 162 0
 496 01b4 8091 0000 		lds r24,dimmerLevels
 497 01b8 8F5F      		subi r24,lo8(-(1))
 498               	.L30:
 499 01ba 8093 0000 		sts dimmerLevels,r24
 500               	.L27:
 501               	.LVL19:
 161:dimmer.c      **** 		if(dimmerRequests[i] > dimmerLevels[i]) {
 502               		.loc 1 161 0
 503 01be 9091 0000 		lds r25,dimmerRequests+1
 504 01c2 8091 0000 		lds r24,dimmerLevels+1
 505 01c6 8917      		cp r24,r25
 506 01c8 00F4      		brsh .L28
 162:dimmer.c      **** 			dimmerLevels[i]++;
 507               		.loc 1 162 0
 508 01ca 8091 0000 		lds r24,dimmerLevels+1
 509 01ce 8F5F      		subi r24,lo8(-(1))
 510 01d0 00C0      		rjmp .L31
 511               	.L28:
 163:dimmer.c      **** 		} else if(dimmerRequests[i] < dimmerLevels[i]) {
 512               		.loc 1 163 0
 513 01d2 9091 0000 		lds r25,dimmerRequests+1
 514 01d6 8091 0000 		lds r24,dimmerLevels+1
 515 01da 9817      		cp r25,r24
 516 01dc 00F4      		brsh .L25
 517               		.loc 1 164 0
 518 01de 8091 0000 		lds r24,dimmerLevels+1
 519 01e2 8150      		subi r24,lo8(-(-1))
 520               	.L31:
 521 01e4 8093 0000 		sts dimmerLevels+1,r24
 522               	.LVL20:
 523               	.L25:
 524               	/* epilogue start */
 525               	.LBE23:
 165:dimmer.c      **** 		}
 166:dimmer.c      **** 	}
 167:dimmer.c      **** 
 168:dimmer.c      **** }...
 526               		.loc 1 168 0
 527 01e8 9F91      		pop r25
 528 01ea 8F91      		pop r24
 529 01ec 0F90      		pop r0
 530 01ee 0FBE      		out __SREG__,r0
 531 01f0 0F90      		pop r0
 532 01f2 1F90      		pop r1
 533 01f4 1895      		reti
 534               	.LFE17:
 536               		.comm	count,2,1
 537               	.global	dimmerLevels
 538               		.section .bss
 541               	dimmerLevels:
 542 0000 0000      		.zero	2
 543               	.global	dimmerRequests
 546               	dimmerRequests:
 547 0002 0000      		.zero	2
 548               	.global	dimmerMasks
 549               		.data
 552               	dimmerMasks:
 553 0000 01        		.byte	1
 554 0001 02        		.byte	2
 795               	.Letext0:
 796               		.file 3 "/usr/lib/gcc/avr/4.7.2/../../../avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 dimmer.c
     /tmp/ccuKCt70.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccuKCt70.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccuKCt70.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccuKCt70.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccuKCt70.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccuKCt70.s:11     .text:0000000000000000 initIO
     /tmp/ccuKCt70.s:66     .text:0000000000000038 initDimmers
     /tmp/ccuKCt70.s:83     .text:0000000000000040 spi_read
     /tmp/ccuKCt70.s:123    .text.startup:0000000000000000 main
     /tmp/ccuKCt70.s:541    .bss:0000000000000000 dimmerLevels
     /tmp/ccuKCt70.s:546    .bss:0000000000000002 dimmerRequests
     /tmp/ccuKCt70.s:203    .text:000000000000005e __vector_17
     /tmp/ccuKCt70.s:234    .text:000000000000007a rampToLevel
     /tmp/ccuKCt70.s:253    .text:0000000000000086 switchToLevel
     /tmp/ccuKCt70.s:277    .text:000000000000009a debugLed
     /tmp/ccuKCt70.s:296    .text:00000000000000a4 __vector_1
                            *COM*:0000000000000002 count
     /tmp/ccuKCt70.s:355    .text:00000000000000f4 __vector_11
     /tmp/ccuKCt70.s:552    .data:0000000000000000 dimmerMasks
     /tmp/ccuKCt70.s:460    .text:0000000000000186 __vector_14

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
