   1               		.file	"dimmer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               	.global	initIO
  11               	initIO:
  12               	.LFB7:
  13               		.file 1 "dimmer.c"
   1:dimmer.c      **** #include <dimmer.h>
   2:dimmer.c      **** 
   3:dimmer.c      **** #include <avr/io.h>
   4:dimmer.c      **** #include <avr/interrupt.h>
   5:dimmer.c      **** #include <avr/pgmspace.h>
   6:dimmer.c      **** #include <avr/eeprom.h>
   7:dimmer.c      **** #include <avr/wdt.h>
   8:dimmer.c      **** 
   9:dimmer.c      **** #include <util/delay.h>
  10:dimmer.c      **** 
  11:dimmer.c      **** #define TRUE 			1
  12:dimmer.c      **** #define FALSE 			0
  13:dimmer.c      **** 
  14:dimmer.c      **** #define MAX_SIZE 		2048
  15:dimmer.c      **** 
  16:dimmer.c      **** #define DEBUG_DDR 		DDRC
  17:dimmer.c      **** #define DEBUG_PORT		PORTC
  18:dimmer.c      **** #define DEBUG_LED 		PC5
  19:dimmer.c      **** 
  20:dimmer.c      **** #define CMD_SET 		0x01
  21:dimmer.c      **** 
  22:dimmer.c      **** #define METHOD_SWITCH 	0x00
  23:dimmer.c      **** #define METHOD_RAMP 	0x01
  24:dimmer.c      **** 
  25:dimmer.c      **** #define DIMMER_COUNT	8
  26:dimmer.c      **** 
  27:dimmer.c      **** uint8_t dimmerMasks[] = {(1<<PD0),(1<<PD1),(1<<PD3), (1<<PD4), (1<<PD5), (1<<PD6), (1<<PD7), (1<<PB
  28:dimmer.c      **** volatile uint8_t dimmerRequests[] = {0,0,0,0,0,0,0,0};
  29:dimmer.c      **** volatile uint8_t dimmerLevels[] = {0,0,0,0,0,0,0,0};
  30:dimmer.c      **** 
  31:dimmer.c      **** 
  32:dimmer.c      **** void initIO (void)
  33:dimmer.c      **** {
  14               		.loc 1 33 0
  15               	/* prologue: function */
  16               	/* frame size = 0 */
  17               	/* stack size = 0 */
  18               	.L__stack_usage = 0
  34:dimmer.c      **** 	//Set the debug LED as output
  35:dimmer.c      **** 	DEBUG_DDR = (1<<DEBUG_LED);
  19               		.loc 1 35 0
  20 0000 80E2      		ldi r24,lo8(32)
  21 0002 87B9      		out 0x7,r24
  36:dimmer.c      **** 
  37:dimmer.c      **** 	//INT0 - ZCD
  38:dimmer.c      **** 	EICRA |= (1<<ISC01) | (0<<ISC00);
  22               		.loc 1 38 0
  23 0004 E9E6      		ldi r30,lo8(105)
  24 0006 F0E0      		ldi r31,0
  25 0008 8081      		ld r24,Z
  26 000a 8260      		ori r24,lo8(2)
  27 000c 8083      		st Z,r24
  39:dimmer.c      **** 	EIMSK |= (1<<INT0);
  28               		.loc 1 39 0
  29 000e E89A      		sbi 0x1d,0
  40:dimmer.c      **** 
  41:dimmer.c      **** 	//Dimming Timer
  42:dimmer.c      **** 	// TCCR0A = 	(1 << WGM01);
  43:dimmer.c      **** 	// TCCR0B = 	((1 << CS02) | (1 << CS00));		// CTC Mode - Prescaler 1024
  44:dimmer.c      **** 	// OCR0A = 	156;								// ~10ms
  45:dimmer.c      **** 	// TIMSK0 = 	(1 << OCIE0A);
  46:dimmer.c      **** 
  47:dimmer.c      **** 	//Set up SPI
  48:dimmer.c      **** 	DDRB &= ~((1<<2)|(1<<3)|(1<<5));   // SCK, MOSI and SS as inputs
  30               		.loc 1 48 0
  31 0010 84B1      		in r24,0x4
  32 0012 837D      		andi r24,lo8(-45)
  33 0014 84B9      		out 0x4,r24
  49:dimmer.c      ****     DDRB |= (1<<4);                    // MISO as output
  34               		.loc 1 49 0
  35 0016 249A      		sbi 0x4,4
  50:dimmer.c      **** 
  51:dimmer.c      ****     SPCR &= ~(1<<MSTR);                // Set as slave 
  36               		.loc 1 51 0
  37 0018 8CB5      		in r24,0x2c
  38 001a 8F7E      		andi r24,lo8(-17)
  39 001c 8CBD      		out 0x2c,r24
  52:dimmer.c      ****     SPCR |= (1<<SPR0)|(1<<SPR1);       // divide clock by 128
  40               		.loc 1 52 0
  41 001e 8CB5      		in r24,0x2c
  42 0020 8360      		ori r24,lo8(3)
  43 0022 8CBD      		out 0x2c,r24
  53:dimmer.c      ****     SPCR |= (1<<SPE);                  // Enable SPI
  44               		.loc 1 53 0
  45 0024 8CB5      		in r24,0x2c
  46 0026 8064      		ori r24,lo8(64)
  47 0028 8CBD      		out 0x2c,r24
  54:dimmer.c      **** 
  55:dimmer.c      **** 	sei();
  48               		.loc 1 55 0
  49               	/* #APP */
  50               	 ;  55 "dimmer.c" 1
  51 002a 7894      		sei
  52               	 ;  0 "" 2
  53               	/* #NOAPP */
  54 002c 0895      		ret
  55               	.LFE7:
  57               	.global	initDimmers
  59               	initDimmers:
  60               	.LFB8:
  56:dimmer.c      **** }
  57:dimmer.c      **** 
  58:dimmer.c      **** void initDimmers(void) {
  61               		.loc 1 58 0
  62               	/* prologue: function */
  63               	/* frame size = 0 */
  64               	/* stack size = 0 */
  65               	.L__stack_usage = 0
  59:dimmer.c      **** 	//Set up the Data Direction Register
  60:dimmer.c      **** 	DDRD |= (1<<PD0) | (1<<PD1) | (1<<PD3) | (1<<PD4) | (1<<PD5) | (1<<PD6) | (1<<PD7);
  66               		.loc 1 60 0
  67 002e 8AB1      		in r24,0xa
  68 0030 8B6F      		ori r24,lo8(-5)
  69 0032 8AB9      		out 0xa,r24
  61:dimmer.c      **** 	//Set the triacs off.
  62:dimmer.c      **** 	PORTD &= ~((1<<PD0) | (1<<PD1) | (1<<PD3) | (1<<PD4) | (1<<PD5) | (1<<PD6) | (1<<PD7));
  70               		.loc 1 62 0
  71 0034 8BB1      		in r24,0xb
  72 0036 8470      		andi r24,lo8(4)
  73 0038 8BB9      		out 0xb,r24
  63:dimmer.c      **** 	//Set PB0 as an output (channel 8)
  64:dimmer.c      **** 	DDRB |= (1<<PB0);
  74               		.loc 1 64 0
  75 003a 209A      		sbi 0x4,0
  76 003c 0895      		ret
  77               	.LFE8:
  79               	.global	spi_read
  81               	spi_read:
  82               	.LFB9:
  65:dimmer.c      **** }
  66:dimmer.c      **** 
  67:dimmer.c      **** unsigned char *spi_read(uint8_t bytes, unsigned char c[]) 
  68:dimmer.c      **** {
  83               		.loc 1 68 0
  84               	.LVL0:
  85               	/* prologue: function */
  86               	/* frame size = 0 */
  87               	/* stack size = 0 */
  88               	.L__stack_usage = 0
  89 003e 972F      		mov r25,r23
  90               	.LVL1:
  91               	.LBB5:
  69:dimmer.c      **** 	for(uint8_t i = 0; i < bytes; i++) {
  92               		.loc 1 69 0
  93 0040 E62F      		mov r30,r22
  94 0042 F72F      		mov r31,r23
  95 0044 00C0      		rjmp .L4
  96               	.LVL2:
  97               	.L6:
  70:dimmer.c      **** 		while(!(SPSR & (1<<SPIF)));
  98               		.loc 1 70 0
  99 0046 0DB4      		in __tmp_reg__,0x2d
 100 0048 07FE      		sbrs __tmp_reg__,7
 101 004a 00C0      		rjmp .L6
  71:dimmer.c      **** 		c[i] = SPDR;
 102               		.loc 1 71 0
 103 004c 2EB5      		in r18,0x2e
 104 004e 2193      		st Z+,r18
 105               	.L4:
  69:dimmer.c      **** 	for(uint8_t i = 0; i < bytes; i++) {
 106               		.loc 1 69 0 discriminator 1
 107 0050 2E2F      		mov r18,r30
 108 0052 261B      		sub r18,r22
 109 0054 2817      		cp r18,r24
 110 0056 00F0      		brlo .L6
 111               	.LBE5:
  72:dimmer.c      **** 	}
  73:dimmer.c      **** 
  74:dimmer.c      **** 	return c;
  75:dimmer.c      **** } 
 112               		.loc 1 75 0
 113 0058 862F      		mov r24,r22
 114               	.LVL3:
 115 005a 0895      		ret
 116               	.LFE9:
 118               		.section	.text.startup,"ax",@progbits
 119               	.global	main
 121               	main:
 122               	.LFB10:
  76:dimmer.c      **** 
  77:dimmer.c      **** int main (void)
  78:dimmer.c      **** {
 123               		.loc 1 78 0
 124 0000 CF93      		push r28
 125               	.LCFI0:
 126 0002 DF93      		push r29
 127               	.LCFI1:
 128 0004 00D0      		rcall .
 129 0006 1F92      		push __zero_reg__
 130               	.LCFI2:
 131 0008 CDB7      		in r28,__SP_L__
 132 000a DEB7      		in r29,__SP_H__
 133               	.LCFI3:
 134               	/* prologue: function */
 135               	/* frame size = 3 */
 136               	/* stack size = 5 */
 137               	.L__stack_usage = 5
  79:dimmer.c      **** 	initIO(); //Setup IO pins and defaults
 138               		.loc 1 79 0
 139 000c 0E94 0000 		call initIO
 140               	.LVL4:
  80:dimmer.c      **** 	initDimmers(); //Set up the dimmers.
 141               		.loc 1 80 0
 142 0010 0E94 0000 		call initDimmers
 143               	.LVL5:
 144               	.L13:
  81:dimmer.c      **** 
  82:dimmer.c      **** 	while(1) {
  83:dimmer.c      **** 
  84:dimmer.c      **** 		while(!(SPSR & (1<<SPIF)));
 145               		.loc 1 84 0 discriminator 1
 146 0014 0DB4      		in __tmp_reg__,0x2d
 147 0016 07FE      		sbrs __tmp_reg__,7
 148 0018 00C0      		rjmp .L13
  85:dimmer.c      **** 
  86:dimmer.c      ****         if(SPDR == CMD_SET) {
 149               		.loc 1 86 0
 150 001a 8EB5      		in r24,0x2e
 151 001c 8130      		cpi r24,lo8(1)
 152 001e 01F4      		brne .L13
 153               	.LBB6:
  87:dimmer.c      ****         	//Read the next 3 bytes
  88:dimmer.c      ****         	unsigned char c[3];
  89:dimmer.c      ****         	spi_read(3, c);
 154               		.loc 1 89 0
 155 0020 BE01      		movw r22,r28
 156 0022 6F5F      		subi r22,-1
 157 0024 7F4F      		sbci r23,-1
 158 0026 83E0      		ldi r24,lo8(3)
 159 0028 0E94 0000 		call spi_read
 160               	.LVL6:
  90:dimmer.c      **** 
  91:dimmer.c      ****         	// if(c[0] == METHOD_SWITCH) {
  92:dimmer.c      ****         		switchToLevel((uint8_t)c[1], (uint8_t)c[2]);
 161               		.loc 1 92 0
 162 002c 2B81      		ldd r18,Y+3
 163               	.LVL7:
 164               	.LBB7:
 165               	.LBB8:
  93:dimmer.c      ****     //     	} else {
  94:dimmer.c      **** 				// rampToLevel((uint8_t)c[1], (uint8_t)c[2]);
  95:dimmer.c      ****     //     	}
  96:dimmer.c      **** 
  97:dimmer.c      ****         }
  98:dimmer.c      **** 
  99:dimmer.c      **** 	}
 100:dimmer.c      **** 
 101:dimmer.c      **** 	return(0);
 102:dimmer.c      **** }
 103:dimmer.c      **** 
 104:dimmer.c      **** void rampToLevel(uint8_t index, uint8_t level) {
 105:dimmer.c      **** 	if(level > 255)
 106:dimmer.c      **** 		level = 255;
 107:dimmer.c      **** 	
 108:dimmer.c      **** 	if(level < 0 ) 
 109:dimmer.c      **** 		level = 0;
 110:dimmer.c      **** 	
 111:dimmer.c      **** 	dimmerRequests[index] = level;
 112:dimmer.c      **** 
 113:dimmer.c      **** 	DEBUG_PORT = (1<<DEBUG_LED);
 114:dimmer.c      **** }
 115:dimmer.c      **** 
 116:dimmer.c      **** void switchToLevel(uint8_t index, uint8_t level) {
 117:dimmer.c      **** 	if(level > 255)
 118:dimmer.c      **** 		level = 255;
 119:dimmer.c      **** 	
 120:dimmer.c      **** 	if(level < 0 ) 
 121:dimmer.c      **** 		level = 0;
 122:dimmer.c      **** 
 123:dimmer.c      **** 	dimmerLevels[index] = level;
 166               		.loc 1 123 0
 167 002e 8A81      		ldd r24,Y+2
 168 0030 90E0      		ldi r25,0
 169 0032 FC01      		movw r30,r24
 170 0034 E050      		subi r30,lo8(-(dimmerLevels))
 171 0036 F040      		sbci r31,hi8(-(dimmerLevels))
 172 0038 2083      		st Z,r18
 124:dimmer.c      **** 	dimmerRequests[index] = level;
 173               		.loc 1 124 0
 174 003a FC01      		movw r30,r24
 175 003c E050      		subi r30,lo8(-(dimmerRequests))
 176 003e F040      		sbci r31,hi8(-(dimmerRequests))
 177 0040 2083      		st Z,r18
 178 0042 00C0      		rjmp .L13
 179               	.LBE8:
 180               	.LBE7:
 181               	.LBE6:
 182               	.LFE10:
 184               		.text
 185               	.global	rampToLevel
 187               	rampToLevel:
 188               	.LFB11:
 104:dimmer.c      **** void rampToLevel(uint8_t index, uint8_t level) {
 189               		.loc 1 104 0
 190               	.LVL8:
 191               	/* prologue: function */
 192               	/* frame size = 0 */
 193               	/* stack size = 0 */
 194               	.L__stack_usage = 0
 111:dimmer.c      **** 	dimmerRequests[index] = level;
 195               		.loc 1 111 0
 196 005c E82F      		mov r30,r24
 197 005e F0E0      		ldi r31,0
 198 0060 E050      		subi r30,lo8(-(dimmerRequests))
 199 0062 F040      		sbci r31,hi8(-(dimmerRequests))
 200 0064 6083      		st Z,r22
 113:dimmer.c      **** 	DEBUG_PORT = (1<<DEBUG_LED);
 201               		.loc 1 113 0
 202 0066 80E2      		ldi r24,lo8(32)
 203               	.LVL9:
 204 0068 88B9      		out 0x8,r24
 205 006a 0895      		ret
 206               	.LFE11:
 208               	.global	switchToLevel
 210               	switchToLevel:
 211               	.LFB12:
 116:dimmer.c      **** void switchToLevel(uint8_t index, uint8_t level) {
 212               		.loc 1 116 0
 213               	.LVL10:
 214               	/* prologue: function */
 215               	/* frame size = 0 */
 216               	/* stack size = 0 */
 217               	.L__stack_usage = 0
 123:dimmer.c      **** 	dimmerLevels[index] = level;
 218               		.loc 1 123 0
 219 006c 90E0      		ldi r25,0
 220 006e FC01      		movw r30,r24
 221 0070 E050      		subi r30,lo8(-(dimmerLevels))
 222 0072 F040      		sbci r31,hi8(-(dimmerLevels))
 223 0074 6083      		st Z,r22
 224               		.loc 1 124 0
 225 0076 FC01      		movw r30,r24
 226 0078 E050      		subi r30,lo8(-(dimmerRequests))
 227 007a F040      		sbci r31,hi8(-(dimmerRequests))
 228 007c 6083      		st Z,r22
 229 007e 0895      		ret
 230               	.LFE12:
 232               	.global	debugLed
 234               	debugLed:
 235               	.LFB13:
 125:dimmer.c      **** }
 126:dimmer.c      **** 
 127:dimmer.c      **** void debugLed(uint8_t state) {
 236               		.loc 1 127 0
 237               	.LVL11:
 238               	/* prologue: function */
 239               	/* frame size = 0 */
 240               	/* stack size = 0 */
 241               	.L__stack_usage = 0
 128:dimmer.c      **** 	DEBUG_PORT = (state<<DEBUG_LED);
 242               		.loc 1 128 0
 243 0080 8295      		swap r24
 244               	.LVL12:
 245 0082 880F      		lsl r24
 246 0084 807E      		andi r24,lo8(-32)
 247 0086 88B9      		out 0x8,r24
 248 0088 0895      		ret
 249               	.LFE13:
 251               	.global	__vector_1
 253               	__vector_1:
 254               	.LFB14:
 129:dimmer.c      **** }
 130:dimmer.c      **** 
 131:dimmer.c      **** volatile uint16_t count;
 132:dimmer.c      **** //Zero Cross Detection.
 133:dimmer.c      **** ISR(INT0_vect) {
 255               		.loc 1 133 0
 256 008a 1F92      		push r1
 257               	.LCFI4:
 258 008c 0F92      		push r0
 259               	.LCFI5:
 260 008e 0FB6      		in r0,__SREG__
 261 0090 0F92      		push r0
 262 0092 1124      		clr __zero_reg__
 263 0094 8F93      		push r24
 264               	.LCFI6:
 265 0096 9F93      		push r25
 266               	.LCFI7:
 267 0098 EF93      		push r30
 268               	.LCFI8:
 269 009a FF93      		push r31
 270               	.LCFI9:
 271               	/* prologue: Signal */
 272               	/* frame size = 0 */
 273               	/* stack size = 7 */
 274               	.L__stack_usage = 7
 134:dimmer.c      **** 	count = 256;
 275               		.loc 1 134 0
 276 009c 80E0      		ldi r24,0
 277 009e 91E0      		ldi r25,lo8(1)
 278 00a0 9093 0000 		sts count+1,r25
 279 00a4 8093 0000 		sts count,r24
 135:dimmer.c      **** 
 136:dimmer.c      **** 	TCCR1B |= 	((1 << CS10) | (1 << WGM12));
 280               		.loc 1 136 0
 281 00a8 E1E8      		ldi r30,lo8(-127)
 282 00aa F0E0      		ldi r31,0
 283 00ac 8081      		ld r24,Z
 284 00ae 8960      		ori r24,lo8(9)
 285 00b0 8083      		st Z,r24
 137:dimmer.c      **** 	OCR1A = 	400;
 286               		.loc 1 137 0
 287 00b2 80E9      		ldi r24,lo8(-112)
 288 00b4 91E0      		ldi r25,lo8(1)
 289 00b6 9093 8900 		sts 136+1,r25
 290 00ba 8093 8800 		sts 136,r24
 138:dimmer.c      **** 	TIMSK1 |= 	(1 << OCIE1A);	
 291               		.loc 1 138 0
 292 00be EFE6      		ldi r30,lo8(111)
 293 00c0 F0E0      		ldi r31,0
 294 00c2 8081      		ld r24,Z
 295 00c4 8260      		ori r24,lo8(2)
 296 00c6 8083      		st Z,r24
 297               	/* epilogue start */
 139:dimmer.c      **** }
 298               		.loc 1 139 0
 299 00c8 FF91      		pop r31
 300 00ca EF91      		pop r30
 301 00cc 9F91      		pop r25
 302 00ce 8F91      		pop r24
 303 00d0 0F90      		pop r0
 304 00d2 0FBE      		out __SREG__,r0
 305 00d4 0F90      		pop r0
 306 00d6 1F90      		pop r1
 307 00d8 1895      		reti
 308               	.LFE14:
 310               	.global	__vector_11
 312               	__vector_11:
 313               	.LFB15:
 140:dimmer.c      **** 
 141:dimmer.c      **** //Zero Cross Timer Interrupt.
 142:dimmer.c      **** ISR(TIMER1_COMPA_vect) {
 314               		.loc 1 142 0
 315 00da 1F92      		push r1
 316               	.LCFI10:
 317 00dc 0F92      		push r0
 318               	.LCFI11:
 319 00de 0FB6      		in r0,__SREG__
 320 00e0 0F92      		push r0
 321 00e2 1124      		clr __zero_reg__
 322 00e4 2F93      		push r18
 323               	.LCFI12:
 324 00e6 3F93      		push r19
 325               	.LCFI13:
 326 00e8 4F93      		push r20
 327               	.LCFI14:
 328 00ea 5F93      		push r21
 329               	.LCFI15:
 330 00ec 8F93      		push r24
 331               	.LCFI16:
 332 00ee 9F93      		push r25
 333               	.LCFI17:
 334 00f0 AF93      		push r26
 335               	.LCFI18:
 336 00f2 BF93      		push r27
 337               	.LCFI19:
 338 00f4 EF93      		push r30
 339               	.LCFI20:
 340 00f6 FF93      		push r31
 341               	.LCFI21:
 342               	/* prologue: Signal */
 343               	/* frame size = 0 */
 344               	/* stack size = 13 */
 345               	.L__stack_usage = 13
 143:dimmer.c      **** 	count--;
 346               		.loc 1 143 0
 347 00f8 8091 0000 		lds r24,count
 348 00fc 9091 0000 		lds r25,count+1
 349 0100 0197      		sbiw r24,1
 350 0102 9093 0000 		sts count+1,r25
 351 0106 8093 0000 		sts count,r24
 352               	.LVL13:
 353 010a E0E0      		ldi r30,lo8(dimmerMasks)
 354 010c F0E0      		ldi r31,hi8(dimmerMasks)
 355 010e 80E0      		ldi r24,0
 356 0110 90E0      		ldi r25,0
 357               	.LVL14:
 358               	.L23:
 359               	.LBB9:
 144:dimmer.c      **** 
 145:dimmer.c      **** 	for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
 146:dimmer.c      **** 		if(dimmerLevels[i] >= count && dimmerLevels[i] != 0) {
 360               		.loc 1 146 0
 361 0112 DC01      		movw r26,r24
 362 0114 A050      		subi r26,lo8(-(dimmerLevels))
 363 0116 B040      		sbci r27,hi8(-(dimmerLevels))
 364 0118 4C91      		ld r20,X
 365 011a 2091 0000 		lds r18,count
 366 011e 3091 0000 		lds r19,count+1
 367 0122 50E0      		ldi r21,0
 368 0124 4217      		cp r20,r18
 369 0126 5307      		cpc r21,r19
 370 0128 00F0      		brlo .L19
 371               		.loc 1 146 0 is_stmt 0 discriminator 1
 372 012a 2C91      		ld r18,X
 373 012c 2223      		tst r18
 374 012e 01F0      		breq .L19
 147:dimmer.c      **** 			if(i > 6) {
 375               		.loc 1 147 0 is_stmt 1
 376 0130 8730      		cpi r24,lo8(7)
 377 0132 01F4      		brne .L20
 148:dimmer.c      **** 				PORTB |= dimmerMasks[i];
 378               		.loc 1 148 0
 379 0134 25B1      		in r18,0x5
 380 0136 3081      		ld r19,Z
 381 0138 232B      		or r18,r19
 382 013a 00C0      		rjmp .L28
 383               	.L20:
 149:dimmer.c      **** 			} else {
 150:dimmer.c      **** 				PORTD |= dimmerMasks[i];
 384               		.loc 1 150 0
 385 013c 2BB1      		in r18,0xb
 386 013e 3081      		ld r19,Z
 387 0140 232B      		or r18,r19
 388 0142 00C0      		rjmp .L29
 389               	.L19:
 151:dimmer.c      **** 			}
 152:dimmer.c      **** 		} else if(dimmerLevels[i] >= (count + 1)) {
 390               		.loc 1 152 0
 391 0144 4C91      		ld r20,X
 392 0146 2091 0000 		lds r18,count
 393 014a 3091 0000 		lds r19,count+1
 394 014e 50E0      		ldi r21,0
 395 0150 2F5F      		subi r18,-1
 396 0152 3F4F      		sbci r19,-1
 397 0154 4217      		cp r20,r18
 398 0156 5307      		cpc r21,r19
 399 0158 00F0      		brlo .L21
 153:dimmer.c      **** 			if(i > 6) {
 400               		.loc 1 153 0
 401 015a 8730      		cpi r24,lo8(7)
 402 015c 01F4      		brne .L22
 154:dimmer.c      **** 				PORTB &= ~dimmerMasks[i];
 403               		.loc 1 154 0
 404 015e 35B1      		in r19,0x5
 405 0160 2081      		ld r18,Z
 406 0162 2095      		com r18
 407 0164 2323      		and r18,r19
 408               	.L28:
 409 0166 25B9      		out 0x5,r18
 410 0168 00C0      		rjmp .L21
 411               	.L22:
 155:dimmer.c      **** 			} else {
 156:dimmer.c      **** 				PORTD &= ~dimmerMasks[i];
 412               		.loc 1 156 0
 413 016a 3BB1      		in r19,0xb
 414 016c 2081      		ld r18,Z
 415 016e 2095      		com r18
 416 0170 2323      		and r18,r19
 417               	.L29:
 418 0172 2BB9      		out 0xb,r18
 419               	.L21:
 420 0174 0196      		adiw r24,1
 421 0176 3196      		adiw r30,1
 145:dimmer.c      **** 	for(uint8_t i = 0; i < DIMMER_COUNT; i++) {
 422               		.loc 1 145 0
 423 0178 8830      		cpi r24,8
 424 017a 9105      		cpc r25,__zero_reg__
 425 017c 01F4      		brne .L23
 426               	/* epilogue start */
 427               	.LBE9:
 157:dimmer.c      **** 			} 
 158:dimmer.c      **** 		}
 159:dimmer.c      **** 	}
 160:dimmer.c      **** }...
 428               		.loc 1 160 0
 429 017e FF91      		pop r31
 430 0180 EF91      		pop r30
 431 0182 BF91      		pop r27
 432 0184 AF91      		pop r26
 433 0186 9F91      		pop r25
 434 0188 8F91      		pop r24
 435 018a 5F91      		pop r21
 436 018c 4F91      		pop r20
 437 018e 3F91      		pop r19
 438 0190 2F91      		pop r18
 439 0192 0F90      		pop r0
 440 0194 0FBE      		out __SREG__,r0
 441 0196 0F90      		pop r0
 442 0198 1F90      		pop r1
 443 019a 1895      		reti
 444               	.LFE15:
 446               		.comm	count,2,1
 447               	.global	dimmerLevels
 448               		.section .bss
 451               	dimmerLevels:
 452 0000 0000 0000 		.zero	8
 452      0000 0000 
 453               	.global	dimmerRequests
 456               	dimmerRequests:
 457 0008 0000 0000 		.zero	8
 457      0000 0000 
 458               	.global	dimmerMasks
 459               		.data
 462               	dimmerMasks:
 463 0000 01        		.byte	1
 464 0001 02        		.byte	2
 465 0002 08        		.byte	8
 466 0003 10        		.byte	16
 467 0004 20        		.byte	32
 468 0005 40        		.byte	64
 469 0006 80        		.byte	-128
 470 0007 01        		.byte	1
 689               	.Letext0:
 690               		.file 2 "/usr/lib/gcc/avr/4.7.2/../../../avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 dimmer.c
     /tmp/ccTmueyW.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccTmueyW.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccTmueyW.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccTmueyW.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccTmueyW.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccTmueyW.s:11     .text:0000000000000000 initIO
     /tmp/ccTmueyW.s:59     .text:000000000000002e initDimmers
     /tmp/ccTmueyW.s:81     .text:000000000000003e spi_read
     /tmp/ccTmueyW.s:121    .text.startup:0000000000000000 main
     /tmp/ccTmueyW.s:451    .bss:0000000000000000 dimmerLevels
     /tmp/ccTmueyW.s:456    .bss:0000000000000008 dimmerRequests
     /tmp/ccTmueyW.s:187    .text:000000000000005c rampToLevel
     /tmp/ccTmueyW.s:210    .text:000000000000006c switchToLevel
     /tmp/ccTmueyW.s:234    .text:0000000000000080 debugLed
     /tmp/ccTmueyW.s:253    .text:000000000000008a __vector_1
                            *COM*:0000000000000002 count
     /tmp/ccTmueyW.s:312    .text:00000000000000da __vector_11
     /tmp/ccTmueyW.s:462    .data:0000000000000000 dimmerMasks

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
